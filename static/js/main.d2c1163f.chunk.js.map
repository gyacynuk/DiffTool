{"version":3,"sources":["components/InlineDiff.js","components/Title.js","components/TextInputs.js","components/Description.js","editdistance/EditDistance.js","editdistance/EditEntity.js","components/DiffLine.js","components/DiffContainer.js","App.js","serviceWorker.js","index.js"],"names":["Component","TitleText","styled","Text","TitleLink","Title","backgroundColor","width","p","variant","forwardedAs","href","target","rel","CodeTextArea","Textarea","TextInputs","row","col","xs","md","scale","rows","defaultValue","this","props","newDocument","onChange","event","updateDocument","oldDocument","a","Description","mt","EditOperation","Object","freeze","createMatrix","m","n","matrix","Array","i","getEditCost","editMatrix","length","Number","POSITIVE_INFINITY","Edit","operation","symbol","secondarySymbol","EditDistance","newWord","oldWord","document","j","diffPenalty","minEditDistance","Math","min","computeDocumentEditDistanceMatrix","computeEditDistanceMatrix","fullEdits","edits","insertCost","deleteCost","maybeReplaceCost","minEditCost","currentIndexCost","push","REPLACE","NONE","INSERT","DELETE","reverse","computeEdits","filter","edit","disjointReplacements","prevOperation","peekEntityNumber","array","entityNumber","NEGATIVE_INFINITY","popMaxGroup","editsByOperation","prevEntityNumber","maxDelete","maxInsert","maxNone","maxEntityNumber","max","pop","toEditEntities","editDistance","entities","entityNum","forEach","number","subEditDistance","insertSubEditEntities","map","subEdit","deleteSubEditEntities","EditEntity","mapToEditEntities","editEntities","reduce","acc","curr","1","2","3","4","orderedEntities","count","currEntity","groupByContiguousOperation","subEditEntities","Line","div","LineEntity","LineNum","LineReplace","DiffLine","editEntity","operator","line","key","LeftMarginLabel","label","RoundBoxer","Box","Pill","color","DiffContainer","text","radioState","useRadioState","state","useCheckboxState","mx","checked","delayedComputation","toggleDelayedComputation","name","diffStateString","aria-label","py","value","mb","App","textarea","computeDiffTimer","bind","triggerDiffComputation","recomputeDiff","updateDiffStateString","clearTimeout","setTimeout","newEditDistance","setState","updateNewDocument","split","newState","height","join","Boolean","window","location","hostname","match","ReactDOM","render","theme","colors","background","primary","modes","dark","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d2c1163f.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Box } from '@smooth-ui/core-sc'\n\nclass InlineDiff extends Component {\n\n    render() {\n       return (\n        <Box\n                backgroundColor=\"primary\"\n                width={{ sm: 1, md: 0.5 }}\n                height={100}\n                mx=\"auto\"\n                p={2}\n                />\n        )\n        \n    }\n\n}\n\nexport default InlineDiff;","import React, { Component } from 'react'\nimport { Box, Button, Text, Separator } from '@smooth-ui/core-sc'\nimport styled, {style} from '@xstyled/styled-components';\n\nconst TitleText = styled(Text)`\n    color: #FFF;\n    text-align: center;\n`\n\nconst TitleLink = styled(Text)`\n    color: #17A2B8;\n    text-decoration: none;\n`\n\nclass Title extends Component {\n\n    render() {\n        return (\n            <Box\n                backgroundColor=\"#333\"\n                width={1}\n                p={5}>\n                   <TitleText variant=\"h1\">Text Comparison Tool</TitleText>\n                   <TitleText variant=\"h4\">Project by <TitleLink\n                        forwardedAs=\"a\"\n                        href=\"https://www.linkedin.com/in/griffin-yacynuk/\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\">Griffin Yacynuk</TitleLink>\n                    </TitleText>\n            </Box>\n            \n        )\n    }\n}\n\nexport default Title;","import React, { Component } from 'react'\nimport { Box, Textarea, Text } from '@smooth-ui/core-sc'\nimport styled from '@xstyled/styled-components';\n\nconst CodeTextArea = styled(Textarea)` \n    font-family: 'Inconsolata', monospace;\n    white-space: nowrap;\n    overflow: auto;\n`;\n\nclass TextInputs extends Component {\n\n    render() {\n        return (\n            <>\n                <Box row>\n                    <Box \n                        col={{xs: 1, md: 1/2}}\n                        p={2}>\n                            <Text variant=\"h4\">New Document</Text>\n                            <CodeTextArea \n                                scale=\"base\"\n                                rows={8}\n                                defaultValue={this.props.newDocument}\n                                onChange={event => this.props.updateDocument(event.target, true)}/>\n                    </Box>\n                    <Box \n                        col={{xs: 1, md: 1/2}}\n                        p={2}>\n                            <Text variant=\"h4\">Old Document</Text>\n                            <CodeTextArea \n                                scale=\"base\"\n                                rows={8}\n                                defaultValue={this.props.oldDocument}\n                                onChange={event => this.props.updateDocument(event.target, false)}/>\n                    </Box>\n                </Box>\n            </>\n        )\n    }\n}\n\nexport default TextInputs;","import React, { Component } from 'react'\nimport { Box, Button, Text, Separator } from '@smooth-ui/core-sc'\nimport styled from '@xstyled/styled-components';\n\nconst A = styled.a`\n    color: #09d3ac;\n    text-decoration: none;\n`\n\nclass Description extends Component {\n\n\n    render() {\n        return (\n            <>\n                <Text variant=\"h2\">Background</Text>\n                <Separator/>\n                <Text variant=\"p\">\n                    Reading <em>Algorithms</em> by DVP during my morning commute. Had been thinking about\n                    the dynamic programming approach to solving the minimum edit distance between two strings.\n                    Colleage was having trouble with a third-party diff tool where the tool was not smart enough\n                    to line up mathcing lines. I thought I could solve it, and decided to take this oppourtinuty\n                    to also make my first forray into React.\n                </Text>\n\n                <Text variant=\"h2\" mt={5}>Algorithm Overview</Text>\n                <Separator/>\n                <Text variant=\"p\">\n                    What is edit distance, levenschtein distance.\n                    <br/>\n                    The DP algorithm outlined in the book does not work for document comparison, since it\n                    has no way of measuring similarity between lines. This makes sense, as with single characters,\n                    they either are equal or not. However when comparing entire strings, things are not so black and\n                    white. We can have varying degrees of similarity, and I needed a way to concretely define this.\n                    So I use compare levenshtein distance between strings as a measure of similarity, and then use\n                    a modified edit distance algorithm to try and minimize cost across the whole document.\n                </Text>\n\n                <Text variant=\"h2\" mt={5}>Try it Out!</Text>\n                <Separator/>\n            </>\n        )\n    }\n}\n\nexport default Description;","export const EditOperation = Object.freeze({\"INSERT\":1, \"DELETE\":2, \"REPLACE\":3, \"NONE\":4});\n\n/**\n * Create an empty m x n matrix (m rows, n columns).\n * @param {*} m number of rows.\n * @param {*} n number of columns.\n */\nfunction createMatrix(m, n) {\n    let matrix = new Array(n);\n    for (let i = 0; i < n; i++) {\n        matrix[i] = new Array(m);\n    }\n    return matrix;\n}\n\n/**\n * \n * @param {*} newWord \n * @param {*} oldWord \n * @returns {number[][]}\n */\nfunction computeEditDistanceMatrix(newWord, oldWord) {\n    let m = newWord.length + 1;\n    let n = oldWord.length + 1;\n    let matrix = createMatrix(m, n);\n\n    // Populate base-case values\n    matrix[0][0] = 0;\n    for (let i = 1; i < m; i ++) {\n        matrix[0][i] = matrix[0][i-1] + 1;\n    }\n    for (let i = 1; i < n; i ++) {\n        matrix[i][0] = matrix[i-1][0] + 1;\n    }\n\n    // Compute values across scanline\n    for (let i = 1; i < m; i ++) {\n        for (let j = 1; j < n; j ++) {\n            var diffPenalty = 0;\n            if (newWord[i-1] !== oldWord[j-1]) {\n                diffPenalty = 1;\n            }\n            matrix[j][i] = Math.min(\n                matrix[j-1][i],\n                matrix[j][i-1],\n                matrix[j-1][i-1]) + diffPenalty;\n        }\n    }\n\n    return matrix;\n}\n\n// cost of 0 is reserved for perfect matches\nfunction computeDocumentEditDistanceMatrix(newDocument, oldDocument) {\n    let m = newDocument.length + 1;\n    let n = oldDocument.length + 1;\n    let matrix = createMatrix(m, n);\n\n    // Populate base-case values\n    matrix[0][0] = 0;\n    for (let i = 1; i < m; i ++) {\n        matrix[0][i] = matrix[0][i-1] + newDocument[i-1].length + 1;\n    }\n    for (let j = 1; j < n; j++) {\n        matrix[j][0] = matrix[j-1][0] + oldDocument[j-1].length + 1;\n    }\n\n    // Compute values across scanline\n    for (let i = 1; i < m; i ++) {\n        for (let j = 1; j < n; j ++) {\n            let diffPenalty = 0;\n            if (newDocument[i-1] !== oldDocument[j-1]) {\n                diffPenalty = new EditDistance(newDocument[i-1], oldDocument[j-1], false).minEditDistance;\n            } else {\n                diffPenalty = -matrix[j-1][i-1] - 1;\n            }\n            matrix[j][i] = Math.min(\n                matrix[j-1][i] + oldDocument[j-1].length,\n                matrix[j][i-1] + newDocument[i-1].length,\n                matrix[j-1][i-1] + diffPenalty) + 1;\n        }\n    }\n\n    return matrix;\n}\n\nfunction getEditCost(editMatrix, row, col) {\n    if (col < 0 || col >= editMatrix.length) {\n        return Number.POSITIVE_INFINITY;\n    } else if (row < 0 || row >= editMatrix[0].length) {\n        return Number.POSITIVE_INFINITY;\n    } else {\n        return editMatrix[col][row];\n    }\n}\n\nfunction computeEdits(editMatrix, newWord, oldWord) {\n    let edits = [];\n    let j = newWord.length;\n    let i = oldWord.length;\n\n    while (i !== 0 || j !== 0) {\n        if(getEditCost(editMatrix, j, i) === 0) {\n            j--;\n            i--;\n            edits.push(new Edit(EditOperation.NONE, newWord[j]));\n            continue;\n        }\n        let insertCost = getEditCost(editMatrix, j - 1, i);\n        let deleteCost = getEditCost(editMatrix, j, i - 1);\n        let maybeReplaceCost = getEditCost(editMatrix, j - 1, i - 1);\n\n        let minEditCost = Math.min(insertCost, deleteCost, maybeReplaceCost);\n        if (minEditCost === maybeReplaceCost) {\n            let currentIndexCost = getEditCost(editMatrix, j, i);\n            j--;\n            i--;\n            if (maybeReplaceCost < currentIndexCost) {\n                edits.push(new Edit(EditOperation.REPLACE, newWord[j], oldWord[i]));\n            } else {\n                edits.push(new Edit(EditOperation.NONE, newWord[j]))\n            }\n        } else if (minEditCost === insertCost) {\n            j --;\n            edits.push(new Edit(EditOperation.INSERT, newWord[j]));\n            \n        } else {\n            i --;\n            edits.push(new Edit(EditOperation.DELETE, oldWord[i]));\n        }\n    }\n\n    return edits.reverse();\n}\n\nexport class Edit {\n    constructor(operation, symbol, secondarySymbol = null) {\n        this.operation = operation;\n        this.symbol = symbol;\n        this.secondarySymbol = secondarySymbol;\n    }\n}\n\nexport class EditDistance {\n\n    constructor(newWord, oldWord, document = true) {\n        this.newWord = newWord;\n        this.oldWord = oldWord;\n\n        let editMatrix = document ? computeDocumentEditDistanceMatrix(newWord, oldWord) : computeEditDistanceMatrix(newWord, oldWord);\n        this.minEditDistance = editMatrix[oldWord.length][newWord.length];\n        this.fullEdits = computeEdits(editMatrix, newWord, oldWord);\n        this.edits = this.fullEdits.filter(edit => edit.operation !== EditOperation.NONE);\n    }\n\n    getNumDisjointReplacements() {\n        if (this.fullEdits.length === 0) {\n            return 0;\n        }\n\n        let disjointReplacements = 0;\n        let prevOperation = null;\n        for (let i = 0; i < this.fullEdits.length; i++) {\n            const { operation } = this.fullEdits[i];\n            if (operation === EditOperation.REPLACE && prevOperation !== EditOperation.REPLACE) {\n                disjointReplacements ++;\n            }\n            prevOperation = operation;\n        }\n\n        return disjointReplacements;\n    }\n\n}\n","import { Edit, EditOperation, EditDistance } from './EditDistance'\n\n/**\n * \n * @param {Edit} edit \n * @param {Number} number \n * @returns {EditEntity[]}\n */\nfunction mapToEditEntities(edit, number) {\n    const { operation, symbol, secondarySymbol } = edit;\n    if (operation === EditOperation.REPLACE) {\n        let subEditDistance = new EditDistance(symbol, secondarySymbol, false);\n        let insertSubEditEntities = subEditDistance.fullEdits\n            .map(edit => edit.operation === EditOperation.REPLACE\n                ? new Edit(EditOperation.INSERT, edit.symbol)\n                : edit)\n            .filter(subEdit => subEdit.operation !== EditOperation.DELETE);\n        let deleteSubEditEntities = subEditDistance.fullEdits\n            .map(edit => edit.operation === EditOperation.REPLACE\n                ? new Edit(EditOperation.DELETE, edit.secondarySymbol)\n                : edit)\n            .filter(subEdit => subEdit.operation !== EditOperation.INSERT);\n        return [\n            new EditEntity(EditOperation.INSERT, symbol, number, insertSubEditEntities),\n            new EditEntity(EditOperation.DELETE, secondarySymbol, number, deleteSubEditEntities)\n        ]\n    }\n    else if (operation === EditOperation.INSERT) {\n        return [new EditEntity(operation, symbol, number)]\n    } \n    else {\n        return [new EditEntity(operation, symbol, number)]\n    }\n}\n\n/**\n * \n * @param {EditEntity[]} array \n */\nfunction peekEntityNumber(array) {\n    if (array.length > 0) {\n        return array[array.length-1].entityNumber;\n    }\n    return Number.NEGATIVE_INFINITY;\n}\n\nfunction popMaxGroup(editsByOperation, prevEntityNumber) {\n    let maxDelete = peekEntityNumber(editsByOperation[EditOperation.DELETE]);\n    let maxInsert = peekEntityNumber(editsByOperation[EditOperation.INSERT]);\n    let maxNone = peekEntityNumber(editsByOperation[EditOperation.NONE]);\n    let maxEntityNumber = Math.max(maxDelete, maxInsert, maxNone);\n\n    if (maxDelete === prevEntityNumber - 1) {\n        return editsByOperation[EditOperation.DELETE].pop();\n    } else if  (maxInsert === prevEntityNumber - 1) {\n        return editsByOperation[EditOperation.INSERT].pop();\n    }\n    \n    if (maxEntityNumber === maxDelete) {\n        return editsByOperation[EditOperation.DELETE].pop();\n    } else if (maxEntityNumber === maxInsert) {\n        return editsByOperation[EditOperation.INSERT].pop();\n    } else {\n        return editsByOperation[EditOperation.NONE].pop();\n    }\n}\n\nfunction groupByContiguousOperation(editEntities) {\n    // Build accumulator as a map with an empty array present for all possible keys\n    let accumulator = { 1: [], 2:[], 3:[], 4: [] }\n\n    // Group edits using operation as key\n    let editsByOperation = editEntities.reduce((acc, curr) => {\n        let op = curr.operation;\n        acc[op].push(curr);\n        return acc;\n    }, accumulator);\n\n    let orderedEntities = []\n    let prevEntityNumber = editEntities.length + 1;\n    for (let count = 0; count < editEntities.length; count ++) {\n        let currEntity = popMaxGroup(editsByOperation, prevEntityNumber);\n        orderedEntities.push(currEntity);\n        prevEntityNumber = currEntity.entityNumber;\n    }\n    return orderedEntities.reverse();\n}\n\n/**\n * \n * @param {EditDistance} editDistance \n * @returns {EditEntity[]}\n */\nexport function toEditEntities(editDistance) {\n    let entities = [];\n    let entityNum = 1;\n    editDistance.fullEdits.forEach(edit => {\n        entities.push(...mapToEditEntities(edit, entityNum))\n        entityNum ++;\n    });\n    return groupByContiguousOperation(entities);\n}\n\nexport class EditEntity {\n\n    constructor(operation, symbol, entityNumber, subEditEntities = null) {\n        this.operation = operation;\n        this.symbol = symbol;\n        this.entityNumber = entityNumber;\n        this.subEditEntities = subEditEntities;\n    }\n\n}\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport { EditOperation } from '../editdistance/EditDistance'\n\nconst Line = styled.div`\n    width: 100%;\n    height: auto;\n    display: inline-flex;\n    overflow: scroll;\n    text-align: left;\n    font-family: 'Inconsolata', monospace;\n    font-size: 16px;\n\n    ${props => {\n        if (props.operation === EditOperation.INSERT) {\n            return \"background-color: #daffd9\";\n        } else if (props.operation === EditOperation.DELETE) {\n            return \"background-color: #ffd9df\";\n        }\n    }};\n`;\n\nconst LineEntity = styled.div`\n    display: inline-block;\n    padding: 2px 8px;\n    white-space: pre;\n`;\n\nconst LineNum = styled(LineEntity)`\n    width: 32px;\n    min-width: 32px;\n    padding-right: 8px;\n    padding-left: 0px;\n    text-align: right;\n    color: #AAA;\n    background-color: rgba(0, 0, 0, .1);\n`;\n\nconst LineReplace = styled.div`\n    display: inline-block;\n    ${props => {\n        if (props.operation === EditOperation.INSERT) {\n            return \"background-color: #a8f7a6\";\n        } else if (props.operation === EditOperation.DELETE) {\n            return \"background-color: #f7a6a6\";\n        }\n    }};\n`;\n\n\nclass DiffLine extends Component {\n\n    render() {\n        const { operation, symbol, entityNumber, subEditEntities } = this.props.editEntity\n\n        let operator = <div>&nbsp;</div>;\n        if (operation === EditOperation.INSERT) {\n            operator = '+';\n        } else if (operation === EditOperation.DELETE) {\n            operator = '-';\n        }\n\n        let line =\n            <LineEntity operation={operation}>\n                {symbol}\n            </LineEntity>;\n        if (subEditEntities) {\n            line =\n                <LineEntity operation={operation}>\n                    {subEditEntities.map((subEdit, i) => {\n                        return <LineReplace operation={subEdit.operation} key={i}>{subEdit.symbol}</LineReplace>\n                    })}\n                </LineEntity>;\n        }\n        \n        return (\n            <Line operation={operation}>\n                <LineNum operation={operation}>\n                    {entityNumber}\n                </LineNum>\n                <LineEntity operation={operation}>\n                    {operator}\n                </LineEntity>\n                {line}\n            </Line>\n        )\n    }\n\n}\n\nexport default DiffLine;","import React, { Component } from 'react'\nimport { Box, Radio, RadioGroup, Switch, useCheckboxState, useRadioState, Separator } from '@smooth-ui/core-sc'\nimport styled, {style} from '@xstyled/styled-components';\nimport { toEditEntities } from '../editdistance/EditEntity'\nimport DiffLine from './DiffLine'\n\nconst LeftMarginLabel = styled.label`\n    margin-left: 16px;\n`;\n\nconst RoundBoxer = styled(Box)`\n    border: 1px solid rgba(0, 0, 0, 0.125);\n    border-radius: 4px;\n    overflow: scroll;\n`;\n\nconst Pill = styled.div`\n    display: inline-block;\n    border: 2px solid ${props => props.color};\n    color: ${props => props.color};\n    border-radius: 16px;\n    padding: 4px 8px;\n    margin-left: 16px;\n    font-size: 12px;\n`;\n\nfunction getColor(text) {\n    if (text === \"Done\") {\n        return \"#12ED57\";\n    } else if (text === \"Waiting\") {\n        return \"#17A2B8\";\n    } else if (text === \"Processing\") {\n        return \"#AF1213\";\n    } else {\n        return \"#333\";\n    }\n}\n\nfunction DiffContainer(props) {\n    const radioState = useRadioState({state: \"viewInline\"});\n    const checkbox = useCheckboxState({state: true})\n    return (\n        <>\n            <Box row mt={2}>\n                <Box col>\n                    <LeftMarginLabel\n                        mx={1}>\n                        <Switch\n                            checked={props.delayedComputation}\n                            onChange={props.toggleDelayedComputation}\n                            scale=\"sm\"\n                            name=\"xs\"/> Delayed Computation\n                    </LeftMarginLabel>\n                    <Pill color={getColor(props.diffStateString)}>\n                        <strong>{props.diffStateString}</strong>\n                    </Pill>\n                    <Separator/>\n                    <RadioGroup {...radioState}\n                        aria-label=\"display options\"\n                        py={1}>  \n                            <LeftMarginLabel>\n                                <Radio {...radioState} value=\"viewInline\"/> Inline\n                            </LeftMarginLabel>\n                            <LeftMarginLabel>\n                                <Radio {...radioState} value=\"viewSide\"/> Side\n                            </LeftMarginLabel>\n                    </RadioGroup>\n                </Box>\n            </Box>\n            <RoundBoxer row\n                m={2}\n                mb={5}>\n                {\n                    toEditEntities(props.editDistance)\n                        .map((editEntity, i) => <DiffLine editEntity={editEntity} key={i}/>)\n                }\n            </RoundBoxer>\n        </>\n    );\n}\n\nexport default DiffContainer;","import React, { Component } from 'react';\nimport InlineDiff from './components/InlineDiff'\nimport Title from './components/Title'\nimport TextInputs from './components/TextInputs'\nimport Description from './components/Description'\nimport DiffContainer from './components/DiffContainer'\nimport { Box, Normalize } from '@smooth-ui/core-sc'\nimport { EditDistance } from './editdistance/EditDistance'\nimport { toEditEntities } from './editdistance/EditEntity'\nimport styled from '@xstyled/styled-components';\n\nconst newDocument = [\n    \"Hello World!\",\n    \"Please enjoy playing around with my attempt at a text diff tool!\",\n    \"It will try to display differences in an easy-to-read format,\",\n    \"by doing things such as grouping blocks of contiguous edits together (as seen above),\",\n    \"or by highlighting micro-differences between lines (as seen here).\",\n    \"If a line requires more than 3 replacements, then it will not be highlighted, as things can get messy.  long line long long lone\",\n    \"Instead, the two lines will be treated as disjoint insertions and deletions, as seen below:\",\n    \"I have fixed typos here as an example ;)\",\n    \"This heuristic seems to work well in most cases.\"\n];\n\nconst oldDocument = [\n    \"Hello!\",\n    \"Please enjoy trying out my attempt at a text diff tool!\",\n    \"It will try to display differences in an easy-to-read format,\",\n    \"by doing things such as grouping blocks of contiguous edits together (as seen above),\",\n    \"or by highlighting small differences between lines (as seen here).\",\n    \"If a line requires more than 3 replacements, then it will not be highlighted, as things can get messy.\",\n    \"Instead, the two lines will be treated as disjoint insertions and deletions, as seen below:\",\n    \"i ficed typos ans an excmple :)\",\n    \"This hueristic seeems to wok well in most caces.\"\n];\n\n\nconst HalfScreenView = styled.div`\n    display: inline-block;\n    width: 50%;\n`;\n\nconst TextArea = styled.textarea`\n    width: 100%;\n    height: 180px;\n    font-family: 'Inconsolata', monospace;\n    font-size: 16px;\n    white-space: nowrap;\n    overflow: auto;\n`;\n\nclass App extends Component {\n    state = {\n        newDocument: newDocument,\n        oldDocument: oldDocument,\n        editDistance: new EditDistance(newDocument, oldDocument),\n        delayedComputation: true,\n        diffStateString: \"Done\"\n    };\n\n    constructor() {\n        super();\n        this.computeDiffTimer = null;\n\n        this.toggleDelayedComputation = this.toggleDelayedComputation.bind(this);\n        this.triggerDiffComputation = this.triggerDiffComputation.bind(this);\n        this.recomputeDiff = this.recomputeDiff.bind(this);\n        this.updateDocument = this.updateDocument.bind(this);\n        this.updateDiffStateString = this.updateDiffStateString.bind(this);\n    }\n\n    triggerDiffComputation() {\n        clearTimeout(this.computeDiffTimer);\n        if (this.state.delayedComputation) {\n            this.updateDiffStateString(\"Waiting\");\n            this.computeDiffTimer = setTimeout(() => {\n                this.recomputeDiff();\n            }, 1000);\n        } else {\n            this.recomputeDiff();\n        }\n    }\n\n    recomputeDiff() {\n        let { newDocument, oldDocument } = this.state;\n        this.updateDiffStateString(\"Processing\");\n        setTimeout(() => {\n            let newEditDistance = new EditDistance(newDocument, oldDocument)\n            this.setState({\n                editDistance: newEditDistance\n            });\n            this.updateDiffStateString(\"Done\");\n        }, 10);\n    }\n\n    updateDocument(target, updateNewDocument = true) {\n        let { newDocument, oldDocument } = this.state;\n        this.setState({\n            newDocument: updateNewDocument ? target.value.split('\\n') : newDocument,\n            oldDocument: updateNewDocument ? oldDocument : target.value.split('\\n')\n        });\n        this.triggerDiffComputation();\n    }\n\n    toggleDelayedComputation() {\n        this.setState({\n            delayedComputation: !this.state.delayedComputation\n        });\n    }\n\n    updateDiffStateString(newState) {\n        this.setState({\n            diffStateString: newState\n        });\n    }\n\n    render() {\n        return (\n            <>\n                <Normalize />\n                {\n                    <>\n                        <Title/>\n                        \n                        <Box\n                            width={1}\n                            height={100}\n                            p={4}>\n                                <Description/>\n                                <TextInputs\n                                    newDocument={newDocument.join('\\n')}\n                                    oldDocument={oldDocument.join('\\n')}\n                                    updateDocument={this.updateDocument}/>\n                                <DiffContainer\n                                    editDistance={this.state.editDistance}\n                                    delayedComputation={this.state.delayedComputation}\n                                    toggleDelayedComputation={this.toggleDelayedComputation}\n                                    diffStateString={this.state.diffStateString}/>\n                        </Box>\n                    </>\n                }\n            </>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ThemeProvider } from '@xstyled/styled-components'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst theme = {\n    colors: {\n      text: '#000',\n      background: '#fff',\n      primary: '#17A2B8',\n      modes: {\n        dark: {\n          text: '#fff',\n          background: '#000',\n          primary: '#0cf',\n        },\n      },\n    },\n  }\n\nReactDOM.render(\n    <ThemeProvider theme={theme}>\n            <App />\n    </ThemeProvider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}