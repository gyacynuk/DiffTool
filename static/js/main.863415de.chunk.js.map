{"version":3,"sources":["assets/edit_distance.png","assets/matrix.png","components/Title.js","components/TextInputs.js","components/Shared.js","components/Description.js","editdistance/EditDistance.js","editdistance/EditEntity.js","components/DiffLine.js","components/DiffContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TitleText","styled","Text","TitleLink","Title","backgroundColor","width","p","variant","forwardedAs","href","target","rel","row","justifyContent","col","mx","className","Component","CodeTextArea","Textarea","TextInputs","xs","md","scale","rows","defaultValue","this","props","newDocument","onChange","event","updateDocument","oldDocument","RoundBoxer","Box","Image","img","CodeText","Description","mt","sm","src","edit_distance","type","color","matrix","EditOperation","Object","freeze","createMatrix","m","n","Array","i","computeEditDistanceMatrix","newWord","oldWord","length","j","diffPenalty","Math","min","computeDocumentEditDistanceMatrix","EditDistance","minEditDistance","getEditCost","editMatrix","Number","POSITIVE_INFINITY","computeEdits","edits","insertCost","deleteCost","maybeReplaceCost","minEditCost","currentIndexCost","push","Edit","REPLACE","NONE","INSERT","DELETE","reverse","operation","symbol","secondarySymbol","document","fullEdits","filter","edit","peekEntityNumber","array","entityNumber","NEGATIVE_INFINITY","popMaxGroup","editsByOperation","prevEntityNumber","maxDelete","maxInsert","maxNone","maxEntityNumber","max","pop","toEditEntities","editDistance","entities","entityNum","forEach","number","subEditDistance","insertSubEditEntities","map","subEdit","deleteSubEditEntities","EditEntity","convertToEditEntities","splitByOperation","editEntities","inserts","deletes","editEntity","subEditEntities","Line","div","LineEntity","LineNum","LineReplace","DiffLine","operator","line","key","LeftMarginLabel","label","Pill","DiffContainer","text","radioState","useRadioState","state","inlineView","mb","reduce","acc","curr","1","2","3","4","orderedEntities","count","currEntity","groupByContiguousOperation","sideView","view","checked","delayedComputation","toggleDelayedComputation","name","verticalAlign","diffStateString","aria-label","py","value","App","computeDiffTimer","processingTimer","bind","triggerDiffComputation","recomputeDiff","updateDiffStateString","clearTimeout","setTimeout","newEditDistance","setState","updateNewDocument","split","newState","height","px","join","Boolean","window","location","hostname","match","ReactDOM","render","theme","colors","background","primary","modes","dark","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.863415de.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/edit_distance.6aca0a77.png\";","module.exports = __webpack_public_path__ + \"static/media/matrix.6478087f.png\";","/**\n * ------------------------------------------------------------------------------------------------\n * The component representing the title and header of the page.\n *\n * Author: Griffin Yacynuk\n * ------------------------------------------------------------------------------------------------\n */\nimport React, { Component } from 'react'\nimport { Box, Text } from '@smooth-ui/core-sc'\nimport styled from '@xstyled/styled-components';\n\nconst TitleText = styled(Text)`\n    color: #FFF;\n    text-align: center;\n`\n\nconst TitleLink = styled(Text)`\n    color: #17A2B8;\n    text-decoration: none;\n`\n\nclass Title extends Component {\n\n    render() {\n        return (\n            <Box\n                backgroundColor=\"#333\"\n                width={1}\n                p={5}>\n                   <TitleText variant=\"h1\">Text Comparison Tool</TitleText>\n                   <TitleText variant=\"h4\">Project by <TitleLink\n                        forwardedAs=\"a\"\n                        href=\"https://www.linkedin.com/in/griffin-yacynuk/\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\">Griffin Yacynuk</TitleLink>\n                    </TitleText>\n                    \n                    <Box row justifyContent={'center'}>\n                        <Box col={\"auto\"}\n                            forwardedAs=\"a\"\n                            href=\"https://www.linkedin.com/in/griffin-yacynuk/\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            mx={2}>\n                            <TitleText variant=\"h4\">\n                                <i className=\"fab fa-linkedin\"></i>\n                            </TitleText>\n                        </Box>\n                        <Box col={\"auto\"}\n                            forwardedAs=\"a\"\n                            href=\"https://github.com/gyacynuk\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            mx={2}>\n                            <TitleText variant=\"h4\">\n                                <i className=\"fab fa-github\"></i>\n                            </TitleText>\n                        </Box>\n                    </Box>\n                    \n    \n                        {/* <i class=\"fab fa-github\"></i> */}\n                    \n            </Box>\n            \n        )\n    }\n}\n\nexport default Title;\n","/**\n * ------------------------------------------------------------------------------------------------\n * The component which builds two text areas in which the user can edit the input documents for the\n * algorithm.\n *\n * Author: Griffin Yacynuk\n * ------------------------------------------------------------------------------------------------\n */\nimport React, { Component } from 'react'\nimport { Box, Textarea, Text } from '@smooth-ui/core-sc'\nimport styled from '@xstyled/styled-components';\n\nconst CodeTextArea = styled(Textarea)` \n    font-family: 'Inconsolata', monospace;\n    white-space: nowrap;\n    overflow: auto;\n`;\n\nclass TextInputs extends Component {\n\n    render() {\n        return (\n            <>\n                <Box row>\n                    <Box \n                        col={{xs: 1, md: 1/2}}\n                        p={2}>\n                            <Text variant=\"h4\">New Document</Text>\n                            <CodeTextArea \n                                scale=\"base\"\n                                rows={10}\n                                defaultValue={this.props.newDocument}\n                                onChange={event => this.props.updateDocument(event.target, true)}/>\n                    </Box>\n                    <Box \n                        col={{xs: 1, md: 1/2}}\n                        p={2}>\n                            <Text variant=\"h4\">Old Document</Text>\n                            <CodeTextArea \n                                scale=\"base\"\n                                rows={10}\n                                defaultValue={this.props.oldDocument}\n                                onChange={event => this.props.updateDocument(event.target, false)}/>\n                    </Box>\n                </Box>\n            </>\n        )\n    }\n}\n\nexport default TextInputs;\n","/**\n * ------------------------------------------------------------------------------------------------\n * A set of shared components to be used across the application.\n *\n * Author: Griffin Yacynuk\n * ------------------------------------------------------------------------------------------------\n */\nimport { Box } from '@smooth-ui/core-sc'\nimport styled from '@xstyled/styled-components';\n\n/**\n * An extension of the Box, with rounded edges\n */\nexport const RoundBoxer = styled(Box)`\n    border: 1px solid rgba(0, 0, 0, 0.125);\n    border-radius: 4px;\n    overflow: hidden;\n`;\n","/**\n * ------------------------------------------------------------------------------------------------\n * A component used to build the text descriptions in the webpage, including the \"Background\" and\n * \"Algorithm Overview\" sections. This also creates the \"Try it Out\" header.\n *\n * Author: Griffin Yacynuk\n * ------------------------------------------------------------------------------------------------\n */\nimport React, { Component } from 'react'\nimport { Box, Text, Separator } from '@smooth-ui/core-sc'\nimport { RoundBoxer } from './Shared'\nimport styled from '@xstyled/styled-components';\nimport edit_distance from '../assets/edit_distance.png'\nimport matrix from '../assets/matrix.png'\n\nconst Image = styled.img`\n    max-width: 576px;\n    width: 100%;\n    height: auto;\n    object-fit: contain; \n    margin-bottom: -3px;\n`;\n\nconst CodeText = styled(Text)`\n    font-family: 'Inconsolata', monospace;\n`;\n\nclass Description extends Component {\n\n    render() {\n        return (\n            <>\n                <Text variant=\"h2\">Background</Text>\n                <Separator/>\n                <Text variant=\"p\">\n                    This project was inspired by the difficulties a friend of mine was experiencing at\n                    work, while trying to build a webpage which compared two JSON files. He wanted to\n                    highlight the differences between the two files and display this to the user, and\n                    he was able to find a component on NPM to do so. However, the component would\n                    naively compare each line from one file with the same line in the other. This was\n                    not ideal, since if one file had additions or deletions, they wouldn't be displayed properly.\n                    Since JSON files are highly structured, he was able to detect insertions or\n                    deletions by comparing the set of keys in each JSON object - then for each\n                    discrepancy he would insert a corresponding blank line in the other file. When\n                    applied recursively to all nested sub-objects, this approach\n                    fixed the issue, but it got me thinking that <em>there must be a better way to do\n                    this.</em> \n                    <br/>\n                    <br/>\n                    I had a lot of ideas bouncing around in my head, many of which were drawn from the book\n                    <em>Algorithms</em> by Sanjoy Dasgupta et al. which I had been reading during my\n                    morning commute. That day I had happened to be reading the chapter on dynamic\n                    programming, and I had the Wagner–Fischer algorithm for solving edit distance\n                    between two string still fresh in my mind. I figured that with some work, I could adapt\n                    that algorithm to solve for the edit distance between two documents instead.\n                    And from that, this project was born. \n                    <br/>\n                    <br/>\n                    If you're interested in how the original edit distance algorithm works, or the steps\n                    I took to adapt it to work with entire documents, then keep reading into the next section.\n                    If instead you want to play around with my algorithm yourself, go ahead and scroll to the\n                    bottom of the page for an interactive demo.\n                </Text>\n\n                <Text variant=\"h2\" mt={5}>Algorithm Overview</Text>\n                <Separator/>\n                <Text variant=\"p\">\n                    Edit distance is defined as the minimum number of operations needed to make two strings\n                    equal, where an operation can be:\n                    <ul>\n                        <li>Inserting a new character</li>\n                        <li>Deleting a character</li>\n                        <li>Substituting a character for another</li>\n                    </ul>\n                    For instance, given the words <CodeText>Saturday</CodeText> and <CodeText>Sunday</CodeText>,\n                    the edit distance between them is 3; we must insert the letters <CodeText>a</CodeText> and&nbsp;\n                    <CodeText>t</CodeText> to <CodeText>Sunday</CodeText>, and then replace the letter&nbsp;\n                    <CodeText>n</CodeText> with <CodeText>r</CodeText>. I have illustrated this in the \n                    figure below. While there exists other combinations of operations which will make these strings equal,\n                    the operations I have provided are minimal in quantity, and hence correspond to the edit distance.\n                </Text>\n                <Box row justifyContent={'center'} p={3}>\n                    <RoundBoxer col={{xs:1, sm:\"auto\"}}>\n                        <Image src={edit_distance}/>\n                    </RoundBoxer>\n                </Box> \n                <Text variant=\"p\">\n                    Solving for the edit distance between two strings lends itself well to dynamic programming,\n                    as we can break the problem down into smaller subproblems which can be reused multiple times.\n                    For instance, let's return to our example above, using the words <CodeText>Saturday</CodeText>\n                    &nbsp;and <CodeText>Sunday</CodeText>. Let's also assume for argument's sake that we know the\n                    edit distance for the following pairs:\n                    <ol type=\"a\">\n                        <li><CodeText>Saturday</CodeText>, <CodeText>Sunda</CodeText></li>\n                        <li><CodeText>Saturda</CodeText>, <CodeText>Sunday</CodeText></li>\n                        <li><CodeText>Saturda</CodeText>, <CodeText>Sunda</CodeText></li>\n                    </ol>\n                    Then from this we can deduce that the edit distance between <CodeText>Saturday</CodeText> and&nbsp;\n                    <CodeText>Sunday</CodeText> must be the minimum of the following:\n                    <ul>\n                        <li>Edit distance a. + 1 to insert <CodeText>y</CodeText> into <CodeText>Sunda</CodeText>, or equivalently delete <CodeText>y</CodeText> from <CodeText>Saturday</CodeText></li>\n                        <li>Edit distance b. + 1 to insert <CodeText>y</CodeText> into <CodeText>Saturda</CodeText>, or equivalently delete <CodeText>y</CodeText> from <CodeText>Sunday</CodeText> </li>\n                        <li>Edit distance c. + 1 if the following pair of characters (<CodeText>y, y</CodeText>) are not equal (meaning we have to substitute one), or + 0 if they are equal (which they are in this case)</li>\n                    </ul>\n                    We can generalize this into a recurrence relation as follows: given two strings denoted\n                    as <CodeText>A, B</CodeText>, let <CodeText>d(i,j)</CodeText> be the edit distance between\n                    the substring of the first <CodeText>i</CodeText> characters of <CodeText>A</CodeText> and the\n                    first <CodeText>j</CodeText> characters of <CodeText>B</CodeText>. Then we have:\n                    <br/>\n                    <br/>\n                    <center><CodeText>d(i, j) = min( d(i-1, j) + 1, d(i, j-1) + 1, d(i-1, j-1) + diff(A[i],B[j]) )</CodeText></center>\n                    <br/>\n                    where <CodeText>diff(A[i],B[j])</CodeText> is equal to 1 if the characters <CodeText>A[i] = B[j]</CodeText>, otherwise 0.\n                    From this recurrence relationship, we can develop our dynamic programming algorithm. We can use\n                    a matrix <CodeText>M</CodeText> to store the results of our subproblems so they can be reused\n                    without recomputing their values.\n                    Let <CodeText>M[i,j]</CodeText> store the edit distance <CodeText>d(i,j)</CodeText>, and let\n                    zero-indices represent the edit distance between the empty string and the corresponding substring.\n                    From this, we can infer that <CodeText>M[0,0] = 0</CodeText> (since the empty string compared\n                    with itself has an edit distance of 0). Furthermore, any string <CodeText>S</CodeText> compared\n                    to the empty string has an edit distance of <CodeText>length(S)</CodeText>, so knowing this we\n                    can populate all the entries in the first row and column. Now, starting at <CodeText>M[1,1]</CodeText> we\n                    can apply our recurrence relation defined above, since we have all needed values to\n                    compute <CodeText>M[1,1] = diff(1,1)</CodeText> stored in the adjacent entries to the top, \n                    left, and top-left of this entry (<CodeText>M[0,1] = diff(0,1), M[1,0] = diff(1,0), M[0,0] = diff(0,0)</CodeText>).\n                    By continuing to populate values in the matrix across the scan-line (left to right, top to bottom),\n                    the entire matrix can be populated. Finally, the bottom-right-most entry will contain the\n                    edit distance between the entirety of the strings, giving us our solution.\n                    <br/>\n                    <br/>\n                    From this matrix, we can also determine the optimal sequence of operations needed to make\n                    the two strings equal by walking backwards from the bottom-right-most square\n                    to <CodeText>M[1,1]</CodeText>. At each step in the walk, we move up, left, or diagonally up and left\n                    into the square with the least cost. In the case of a tie, we always opt for moving on a\n                    diagonal, so we will reach <CodeText>M[1,1]</CodeText> with fewer steps. I have illustrated\n                    this process below, with arrows marking the path walked, grey squares (\n                    <Text variant=\"p\" color={\"#D8D8D8\"}>\n                        <i className=\"fas fa-square\" color={\"#D8D8D8\"}></i>\n                    </Text>\n                    ) representing the case where characters are the same (cost of 0), green squares (\n                    <Text variant=\"p\" color={\"#A8F7A6\"}>\n                        <i className=\"fas fa-square\" color={\"#A8F7A6\"}></i>\n                    </Text>\n                    ) representing insertions (cost of 1), and purple squares (\n                    <Text variant=\"p\" color={\"#A088FF\"}>\n                        <i className=\"fas fa-square\" color={\"#A088FF\"}></i>\n                    </Text>\n                    ) representing substitutions (cost of 1).\n                </Text>\n                <Box row justifyContent={'center'} p={3}>\n                    <RoundBoxer col={{xs:1, sm:\"auto\"}}>\n                        <Image src={matrix}/>\n                    </RoundBoxer>\n                </Box> \n                <Text variant=\"p\">\n                    Initially I thought I could apply this algorithm directly to two documents, treating each\n                    line as if it were a character. But this did not produce the results I was expecting. While\n                    this approach did manage to match up identical lines with each other, it would pair inserted, \n                    modified or deleted lines with random lines in the other file. This is because it was treating\n                    each line like a character, and when comparing two characters, they either are the same or they\n                    are not. However when dealing with entire lines of text, this is not entirely true:\n                    there is also a concept of <em>similarity</em> between lines, and to match lines with there most\n                    similar pair, I somehow had to quantify this.\n                    <br/>\n                    <br/>\n                    Luckily for me I had a great tool to do so, having just implemented the edit distance algorithm.\n                    So for my second approach, I would modify my algorithm to compute the edit distance over the entire\n                    document where the cost of an insertion or deletion is equal to the length of the inserted or deleted line,\n                    and the cost of a substitution is the edit distance between the lines being substituted!\n                    This algorithm yielded much better results, however it still wasn't perfect. Consider the following\n                    example documents:\n                </Text>\n                <Box row justifyContent={'center'} p={3}>\n                    <RoundBoxer col={3/7} p={{xs:1, md:3}} mx={{xs:1, md:3}}>\n                        <CodeText>\n                            Hello World!\n                            <br/>\n                            Hello\n                        </CodeText>\n                    </RoundBoxer>\n                    <RoundBoxer col={3/7} p={{xs:1, md:3}} mx={{xs:1, md:3}}>\n                        <CodeText>\n                            Hello\n                        </CodeText>\n                    </RoundBoxer>\n                </Box> \n                <Text variant=\"p\">\n                    My algorithm would opt to align <CodeText>\"Hello World!\"</CodeText> with <CodeText>\"Hello\"</CodeText> and\n                    then consider the <CodeText>\"Hello\"</CodeText> in the\n                    left-most document as an insertion (at a cost of 7 for substitution + 5 for insertion = 12), since\n                    the substitution operation is a diagonal step on the walk described above. However\n                    the desired behaviour would have been to consider <CodeText>\"Hello World!\"</CodeText> as an insertion,\n                    and then match <CodeText>\"Hello\"</CodeText> with <CodeText>\"Hello\"</CodeText> (also at cost of 12), but\n                    this does not result in a diagonal step. \n                    To overcome this, I initially tried removing the\n                    prioritization on diagonal steps in the case of a tie, but this ended up producing strange\n                    behaviour. I also tried re-weighting the cost of the operations, making insertions and\n                    deletions cheaper, but when doing so I could always provide an adversarial example which would once again\n                    produce strange behaviour.\n                    <br/>\n                    <br/>\n                    I was finally able to overcome this when I had the realization that the algorithms core goal should be to match up\n                    as many identical lines as possible, and then find the best pairing of similar lines afterwards.\n                    With this in mind, I restructured the algorithm so that whenever it paired two identical lines\n                    together, this operation would have a negative cost such that the resulting element in the matrix\n                    becomes 0. Furthermore, I increased the cost of all other operations by 1, thus reserving the\n                    0-cost element for perfect matches. By doing so the algorithm will always opt to pair up macthing\n                    lines (as they have a cost strictly less than all other operations), whilst matching up the\n                    non-matching lines with their most similar pairs. Unfortunately while this change does pair\n                    up the lines of the two documents in the optimal fashion, it comes at the cost of losing\n                    the measurement of total \"edit distance\" between the documents (which luckily is of no\n                    interest to me).\n                    <br/>\n                    <br/>\n                    And with that, we have my algorithm for document comparison. To test this algorithm out,\n                    see the next interactive section below where you can see how this algorithm performs with\n                    your own documents!\n                </Text>\n\n                <Text variant=\"h2\" mt={5}>Try it Out!</Text>\n                <Separator/>\n            </>\n        )\n    }\n}\n\nexport default Description;\n","/**\n * ------------------------------------------------------------------------------------------------\n * A set of classes and functions for computing edit distance between both strings and documents.\n *\n * Author: Griffin Yacynuk\n * ------------------------------------------------------------------------------------------------\n */\n\n/**\n * An enum for identifying operation type.\n */\nexport const EditOperation = Object.freeze({\"INSERT\":1, \"DELETE\":2, \"REPLACE\":3, \"NONE\":4});\n\n/**\n * Create an empty m x n matrix (m rows, n columns).\n *\n * @param {Number} m number of rows\n * @param {Number} n number of columns\n */\nfunction createMatrix(m, n) {\n    let matrix = new Array(n);\n    for (let i = 0; i < n; i++) {\n        matrix[i] = new Array(m);\n    }\n    return matrix;\n}\n\n/**\n * Create and populate a matrix for computing the edit distance matrix between the given input\n * strings, using the Wagner-Fischer dynamic programming algorithm.\n *\n * @param {String} newWord a string in which discrepencies are considered as insertions\n * @param {String} oldWord a string in which discrepencies are considered as deletions\n * @returns {Number[][]}\n */\nfunction computeEditDistanceMatrix(newWord, oldWord) {\n    let m = newWord.length + 1;\n    let n = oldWord.length + 1;\n    let matrix = createMatrix(m, n);\n\n    // Populate base-case values\n    matrix[0][0] = 0;\n    for (let i = 1; i < m; i ++) {\n        matrix[0][i] = matrix[0][i-1] + 1;\n    }\n    for (let i = 1; i < n; i ++) {\n        matrix[i][0] = matrix[i-1][0] + 1;\n    }\n\n    // Compute values across scanline\n    for (let i = 1; i < m; i ++) {\n        for (let j = 1; j < n; j ++) {\n            var diffPenalty = 0;\n            if (newWord[i-1] !== oldWord[j-1]) {\n                diffPenalty = 1;\n            }\n            matrix[j][i] = Math.min(\n                matrix[j-1][i],\n                matrix[j][i-1],\n                matrix[j-1][i-1]) + diffPenalty;\n        }\n    }\n\n    return matrix;\n}\n\n/**\n * Create and populate a matrix for computing the edit distance matrix between the given input\n * documents, using my own adaptation of the Wagner-Fischer dynamic programming algorithm.\n *\n * Note: This matrix should be used for computing the optimal set of operations to make the two\n * documents equal, whilst matching up asmany identical lines as possible. However it cannot be\n * used to compute the actual edit distance measure between documents.\n *\n * @param {String[]} newDocument a document in which discrepencies are considered as insertions\n * @param {String[]} oldDocument a document in which discrepencies are considered as deletions\n * @returns {Number[][]}\n */\nfunction computeDocumentEditDistanceMatrix(newDocument, oldDocument) {\n    let m = newDocument.length + 1;\n    let n = oldDocument.length + 1;\n    let matrix = createMatrix(m, n);\n\n    // Populate base-case values\n    matrix[0][0] = 0;\n    for (let i = 1; i < m; i ++) {\n        matrix[0][i] = matrix[0][i-1] + newDocument[i-1].length + 1;\n    }\n    for (let j = 1; j < n; j++) {\n        matrix[j][0] = matrix[j-1][0] + oldDocument[j-1].length + 1;\n    }\n\n    // Compute values across scanline\n    for (let i = 1; i < m; i ++) {\n        for (let j = 1; j < n; j ++) {\n            let diffPenalty = 0;\n            if (newDocument[i-1] !== oldDocument[j-1]) {\n                // Penalty for replacement equal to the edit distance between the two lines\n                diffPenalty = new EditDistance(newDocument[i-1], oldDocument[j-1], false).minEditDistance;\n            } else {\n                // Negative cost resulting in a 0-cost entry\n                diffPenalty = -matrix[j-1][i-1] - 1;\n            }\n            matrix[j][i] = Math.min(\n                matrix[j-1][i] + oldDocument[j-1].length,\n                matrix[j][i-1] + newDocument[i-1].length,\n                matrix[j-1][i-1] + diffPenalty) + 1;\n        }\n    }\n\n    return matrix;\n}\n\n/**\n * Get the cost of an entry in an edit distance matrix. Returns negative infinity if the requested\n * element is outside the bounds of the matrix.\n *\n * @param {Number[][]} editMatrix the edit distance matrix\n * @param {Number} row the row of the element being queried\n * @param {Number} col the column of the element being queried\n * @returns {Number}\n */\nfunction getEditCost(editMatrix, row, col) {\n    if (col < 0 || col >= editMatrix.length) {\n        return Number.POSITIVE_INFINITY;\n    } else if (row < 0 || row >= editMatrix[0].length) {\n        return Number.POSITIVE_INFINITY;\n    } else {\n        return editMatrix[col][row];\n    }\n}\n\n/**\n * Given an edit distance matrix and the two strings/documents which were compared to make the\n * matrix, determine the optimal set of edits needed to make the inputs equal.\n *\n * @param {Number[][]} editMatrix the edit distance matrix\n * @param {String|String[]} newWord an input in which discrepencies are considered as insertions\n * @param {String|String[]} oldWord an input in which discrepencies are considered as deletions\n * @returns {Edit[]}\n */\nfunction computeEdits(editMatrix, newWord, oldWord) {\n    let edits = [];\n    let j = newWord.length;\n    let i = oldWord.length;\n\n    while (i !== 0 || j !== 0) {\n        if(getEditCost(editMatrix, j, i) === 0) {\n            j--;\n            i--;\n            edits.push(new Edit(EditOperation.NONE, newWord[j]));\n            continue;\n        }\n        let insertCost = getEditCost(editMatrix, j - 1, i);\n        let deleteCost = getEditCost(editMatrix, j, i - 1);\n        let maybeReplaceCost = getEditCost(editMatrix, j - 1, i - 1);\n\n        let minEditCost = Math.min(insertCost, deleteCost, maybeReplaceCost);\n        if (minEditCost === maybeReplaceCost) {\n            let currentIndexCost = getEditCost(editMatrix, j, i);\n            j--;\n            i--;\n            if (maybeReplaceCost < currentIndexCost) {\n                edits.push(new Edit(EditOperation.REPLACE, newWord[j], oldWord[i]));\n            } else {\n                edits.push(new Edit(EditOperation.NONE, newWord[j]))\n            }\n        } else if (minEditCost === insertCost) {\n            j --;\n            edits.push(new Edit(EditOperation.INSERT, newWord[j]));\n            \n        } else {\n            i --;\n            edits.push(new Edit(EditOperation.DELETE, oldWord[i]));\n        }\n    }\n\n    return edits.reverse();\n}\n\n/**\n * A class which represents an edit operation, as well as the symbol(s) which it is performed on.\n */\nexport class Edit {\n    /**\n     * Create a new Edit.\n     *\n     * @param {EditOperation} operation the operation that this edit represents\n     * @param {String} symbol the input in which this edit operates on\n     * @param {String} secondarySymbol the secondary input in which this edit operates on (in the\n     * case of a REPLACE operation, for instance).\n     */\n    constructor(operation, symbol, secondarySymbol = null) {\n        this.operation = operation;\n        this.symbol = symbol;\n        this.secondarySymbol = secondarySymbol;\n    }\n}\n\n/**\n * A class which represents the edit distance between two strings/documents, as well as the\n * associated edit operations.\n */\nexport class EditDistance {\n    /**\n     * Create a new EditDistance.\n     *\n     * @param {String|String[]} newWord an input which discrepencies are considered as insertions\n     * @param {String|String[]} oldWord an input which discrepencies are considered as insertions\n     * @param {Boolean} document true if this is a document comparison, false for string comparison\n     */\n    constructor(newWord, oldWord, document = true) {\n        this.newWord = newWord;\n        this.oldWord = oldWord;\n\n        let editMatrix = document ? computeDocumentEditDistanceMatrix(newWord, oldWord) : computeEditDistanceMatrix(newWord, oldWord);\n        this.minEditDistance = editMatrix[oldWord.length][newWord.length];\n        this.fullEdits = computeEdits(editMatrix, newWord, oldWord);\n        this.edits = this.fullEdits.filter(edit => edit.operation !== EditOperation.NONE);\n    }\n}\n","/**\n * ------------------------------------------------------------------------------------------------\n * A set of classes and functions for processing edits and edit distance matrices into graphically\n * displayable components.\n *\n * Author: Griffin Yacynuk\n * ------------------------------------------------------------------------------------------------\n */\nimport { Edit, EditOperation, EditDistance } from './EditDistance'\n\n/**\n * Converts an Edit into a displayable EditEntity. In the case of a REPLACE, convert it into two\n * seperate EditEntities (one representing an INSERT, the other a DELETE).\n *\n * @param {Edit} edit the edit to be converted to a displayable component.\n * @param {Number} number the line number given to this operation.\n * @returns {EditEntity[]}\n */\nfunction convertToEditEntities(edit, number) {\n    const { operation, symbol, secondarySymbol } = edit;\n    if (operation === EditOperation.REPLACE) {\n        let subEditDistance = new EditDistance(symbol, secondarySymbol, false);\n        let insertSubEditEntities = subEditDistance.fullEdits\n            .map(edit => edit.operation === EditOperation.REPLACE\n                ? new Edit(EditOperation.INSERT, edit.symbol)\n                : edit)\n            .filter(subEdit => subEdit.operation !== EditOperation.DELETE);\n        let deleteSubEditEntities = subEditDistance.fullEdits\n            .map(edit => edit.operation === EditOperation.REPLACE\n                ? new Edit(EditOperation.DELETE, edit.secondarySymbol)\n                : edit)\n            .filter(subEdit => subEdit.operation !== EditOperation.INSERT);\n        return [\n            new EditEntity(EditOperation.INSERT, symbol, number, insertSubEditEntities),\n            new EditEntity(EditOperation.DELETE, secondarySymbol, number, deleteSubEditEntities)\n        ]\n    }\n    else if (operation === EditOperation.INSERT) {\n        return [new EditEntity(operation, symbol, number)]\n    } \n    else {\n        return [new EditEntity(operation, symbol, number)]\n    }\n}\n\n/**\n * Peek at the edit number of the last edit entity in the passed in list.\n *\n * @param {EditEntity[]} array the list of edit entities.\n * @returns {Number}\n */\nfunction peekEntityNumber(array) {\n    if (array.length > 0) {\n        return array[array.length-1].entityNumber;\n    }\n    return Number.NEGATIVE_INFINITY;\n}\n\n/**\n * Given a map grouping EditEntities by their associated EditOperation, pop the entity from the\n * group with the maximum enity number, or in the case of contiguous operations, the next operation\n * in a contiguous sequence.\n * \n * @param {Map<EditOperation, EditEntity>} editsByOperation a map grouping EditEntities by their\n * associated EditOperation\n * @param {Number} prevEntityNumber the entity number of the previously popped edit entity.\n * @returns {EditEntity}\n */\nfunction popMaxGroup(editsByOperation, prevEntityNumber) {\n    let maxDelete = peekEntityNumber(editsByOperation[EditOperation.DELETE]);\n    let maxInsert = peekEntityNumber(editsByOperation[EditOperation.INSERT]);\n    let maxNone = peekEntityNumber(editsByOperation[EditOperation.NONE]);\n    let maxEntityNumber = Math.max(maxDelete, maxInsert, maxNone);\n\n    if (maxDelete === prevEntityNumber - 1) {\n        return editsByOperation[EditOperation.DELETE].pop();\n    } else if  (maxInsert === prevEntityNumber - 1) {\n        return editsByOperation[EditOperation.INSERT].pop();\n    }\n    \n    if (maxEntityNumber === maxDelete) {\n        return editsByOperation[EditOperation.DELETE].pop();\n    } else if (maxEntityNumber === maxInsert) {\n        return editsByOperation[EditOperation.INSERT].pop();\n    } else {\n        return editsByOperation[EditOperation.NONE].pop();\n    }\n}\n\n/**\n * Given a list of EditEntities, build a new list which groups together contiguous operations.\n *\n * @param {EditEntity[]} editEntities a list of EditEntities\n * @returns {EditEntity[]}\n */\nexport function groupByContiguousOperation(editEntities) {\n    // Build accumulator as a map with an empty array present for all possible keys\n    let accumulator = { 1: [], 2:[], 3:[], 4: [] }\n\n    // Group edits using operation as key\n    let editsByOperation = editEntities.reduce((acc, curr) => {\n        let op = curr.operation;\n        acc[op].push(curr);\n        return acc;\n    }, accumulator);\n\n    let orderedEntities = []\n    let prevEntityNumber = editEntities.length + 1;\n    for (let count = 0; count < editEntities.length; count ++) {\n        let currEntity = popMaxGroup(editsByOperation, prevEntityNumber);\n        orderedEntities.push(currEntity);\n        prevEntityNumber = currEntity.entityNumber;\n    }\n    return orderedEntities.reverse();\n}\n\n/**\n * Convert the edits derived from an EditDistance object into EditEntities.\n *\n * @param {EditDistance} editDistance an EditDistance object\n * @returns {EditEntity[]}\n */\nexport function toEditEntities(editDistance) {\n    let entities = [];\n    let entityNum = 1;\n    editDistance.fullEdits.forEach(edit => {\n        entities.push(...convertToEditEntities(edit, entityNum))\n        entityNum ++;\n    });\n    return entities;\n}\n\n/**\n * Split a list of EditEntities into two seperate lists, with the first list showing insertions,\n * and the second showing deletions. Insert blank lines in the opposite list corresponding to\n * operations not included. NONE operations appear in both lists.\n *\n * @param {EditEntity[]} editEntities a list of EditEntities\n * @returns {EditEntity[][]}\n */\nexport function splitByOperation(editEntities) {\n    let inserts = [];\n    let deletes = [];\n\n    editEntities.forEach(editEntity => {\n        let { operation, subEditEntities } = editEntity;\n        if (operation === EditOperation.INSERT) {\n            inserts.push(editEntity);\n            if (subEditEntities === null) {\n                deletes.push(new EditEntity(EditOperation.NONE, \"\", \"*\",));\n            }\n        } else if (operation === EditOperation.DELETE) {\n            deletes.push(editEntity);\n            if (subEditEntities === null) {\n                inserts.push(new EditEntity(EditOperation.NONE, \"\", \"*\",));\n            }\n        } else {\n            inserts.push(editEntity);\n            deletes.push(editEntity);\n        }\n    })\n\n    return [inserts, deletes];\n}\n\n/**\n * A class representing a graphically displayable component, corresponding to an edit operation\n * (INSERT, DELETE, etc.) and the line/character it operates on.\n */\nexport class EditEntity {\n    /**\n     * Create an EditEntity.\n     *\n     * @param {EditOperation} operation the operation it represents\n     * @param {String} symbol the line/character it operates on\n     * @param {Number} entityNumber the line number of the operation\n     * @param {Edit[]]?} subEditEntities if this operating on a line of text from a document, and\n     * if this is a replacement, this represents the edits needed to be done on the line.\n     */\n    constructor(operation, symbol, entityNumber, subEditEntities = null) {\n        this.operation = operation;\n        this.symbol = symbol;\n        this.entityNumber = entityNumber;\n        this.subEditEntities = subEditEntities;\n    }\n}\n","/**\n * ------------------------------------------------------------------------------------------------\n * A set of components used to build a line highlighting differences between two documents.\n *\n * Author: Griffin Yacynuk\n * ------------------------------------------------------------------------------------------------\n */\nimport React, { Component } from 'react'\nimport styled from 'styled-components'\nimport { EditOperation } from '../editdistance/EditDistance'\n\nconst Line = styled.div`\n    width: 100%;\n    height: auto;\n    display: inline-flex;\n    overflow: auto;\n    text-align: left;\n    font-family: 'Inconsolata', monospace;\n    font-size: 16px;\n\n    ${props => {\n        if (props.operation === EditOperation.INSERT) {\n            return \"background-color: #daffd9\";\n        } else if (props.operation === EditOperation.DELETE) {\n            return \"background-color: #ffd9df\";\n        }\n    }};\n`;\n\nconst LineEntity = styled.div`\n    display: inline-block;\n    padding: 2px 8px;\n    white-space: pre;\n`;\n\nconst LineNum = styled(LineEntity)`\n    width: 32px;\n    min-width: 32px;\n    padding-right: 8px;\n    padding-left: 0px;\n    text-align: right;\n    color: #AAA;\n    background-color: rgba(0, 0, 0, .1);\n`;\n\nconst LineReplace = styled.div`\n    display: inline-block;\n    ${props => {\n        if (props.operation === EditOperation.INSERT) {\n            return \"background-color: #a8f7a6\";\n        } else if (props.operation === EditOperation.DELETE) {\n            return \"background-color: #f7a6a6\";\n        }\n    }};\n`;\n\n\nclass DiffLine extends Component {\n\n    render() {\n        const { operation, symbol, entityNumber, subEditEntities } = this.props.editEntity\n\n        let operator = <div>&nbsp;</div>;\n        if (operation === EditOperation.INSERT) {\n            operator = '+';\n        } else if (operation === EditOperation.DELETE) {\n            operator = '-';\n        }\n\n        let line =\n            <LineEntity operation={operation}>\n                {symbol}\n            </LineEntity>;\n        if (subEditEntities) {\n            line =\n                <LineEntity operation={operation}>\n                    {subEditEntities.map((subEdit, i) => {\n                        return <LineReplace operation={subEdit.operation} key={i}>{subEdit.symbol}</LineReplace>\n                    })}\n                </LineEntity>;\n        }\n        \n        return (\n            <Line operation={operation}>\n                <LineNum operation={operation}>\n                    {entityNumber}\n                </LineNum>\n                <LineEntity operation={operation}>\n                    {operator}\n                </LineEntity>\n                {line}\n            </Line>\n        )\n    }\n\n}\n\nexport default DiffLine;\n","/**\n * ------------------------------------------------------------------------------------------------\n * A component which houses a set of DiffLines, showing the complete set of differences between two\n * documents. Also provides radio buttons to change display type, and a switch to control\n * computation mode.\n *\n * Author: Griffin Yacynuk\n * ------------------------------------------------------------------------------------------------\n */\nimport React from 'react'\nimport styled from '@xstyled/styled-components';\nimport { toEditEntities, groupByContiguousOperation, splitByOperation } from '../editdistance/EditEntity'\nimport { Box, Radio, RadioGroup, Switch, useRadioState, Separator } from '@smooth-ui/core-sc'\nimport { RoundBoxer } from './Shared'\nimport DiffLine from './DiffLine'\n\nconst LeftMarginLabel = styled.label`\n    margin-left: 16px;\n`;\n\nconst Pill = styled.div`\n    display: inline-block;\n    border: 2px solid ${props => props.color};\n    color: ${props => props.color};\n    border-radius: 16px;\n    padding: 4px 8px;\n    margin-left: 16px;\n    font-size: 12px;\n`;\n\nfunction getColor(text) {\n    if (text === \"Done\") {\n        return \"#3bd12e\";\n    } else if (text === \"Waiting\") {\n        return \"#17A2B8\";\n    } else if (text === \"Processing\") {\n        return \"#AF1213\";\n    } else {\n        return \"#333\";\n    }\n}\n\nfunction DiffContainer(props) {\n    const radioState = useRadioState({state: \"viewInline\"});\n\n    let editEntities = toEditEntities(props.editDistance);\n\n    let inlineView = <RoundBoxer row key={1}\n        m={2}\n        mb={5}>\n        {\n            groupByContiguousOperation(toEditEntities(props.editDistance))\n                .map((editEntity, i) => <DiffLine editEntity={editEntity} key={i}/>)\n        }\n    </RoundBoxer>;\n\n    let sideView = <RoundBoxer row key={2}\n        m={2}\n        mb={5}>\n            <Box col={1/2}> \n            {\n                splitByOperation(editEntities)[0]\n                    .map((editEntity, i) => <DiffLine editEntity={editEntity} key={i}/>)\n            }\n            </Box>\n            <Box col={1/2}>\n            {\n                splitByOperation(editEntities)[1]\n                    .map((editEntity, i) => <DiffLine editEntity={editEntity} key={i}/>)\n            }\n            </Box>\n        </RoundBoxer>;\n\n    let view = [inlineView];\n    if (radioState.state === \"viewSide\") {\n        view = [sideView];\n    }\n\n    return (\n        <>\n            <Box row mt={2}>\n                <Box col>\n                    <LeftMarginLabel mx={1}>\n                        <Switch\n                            checked={props.delayedComputation}\n                            onChange={props.toggleDelayedComputation}\n                            scale=\"sm\"\n                            name=\"xs\"\n                            verticalAlign=\"middle\"/> Delayed Computation\n                    </LeftMarginLabel>\n                    <Pill color={getColor(props.diffStateString)}>\n                        <strong>{props.diffStateString}</strong>\n                    </Pill>\n                    <Separator/>\n                    <RadioGroup {...radioState}\n                        aria-label=\"display options\"\n                        py={1}>\n                            <Box row justifyContent={{ md: 'left' }}>\n                                <Box col={{xs:1, md: 'auto'}}>\n                                    <LeftMarginLabel>\n                                        <Radio {...radioState} value=\"viewInline\"/> Inline\n                                    </LeftMarginLabel>\n                                    </Box>  \n                                <Box col={{xs:1, md: 'auto'}}\n                                    mt={{xs:2, md: 0}}>\n                                    <LeftMarginLabel>\n                                        <Radio {...radioState} value=\"viewSide\"/> Side\n                                    </LeftMarginLabel>\n                                </Box>  \n                            </Box>\n                             \n                    </RadioGroup>\n                </Box>\n            </Box>\n            {\n                view.map(i => i)\n            }\n        </>\n    );\n}\n\nexport default DiffContainer;\n","import React, { Component } from 'react';\nimport Title from './components/Title'\nimport TextInputs from './components/TextInputs'\nimport Description from './components/Description'\nimport DiffContainer from './components/DiffContainer'\nimport { Box, Normalize } from '@smooth-ui/core-sc'\nimport { EditDistance } from './editdistance/EditDistance'\n\nconst newDocument = [\n    \"Hello World!\",\n    \"Have fun playing around with my implementation of a text comparison tool,\",\n    \"based off of the Wagner–Fischer dynamic programming algorithm for calculating\",\n    \"the Levenshtein distance between two strings.\",\n    \"I have tried to display differences in an easy-to-read format, by grouping\",\n    \"contiguous operations together, and by highlighting small differences between\",\n    \"similar lines (as seen above).\",\n    \"New lines appear like this\",\n    \"(with no per-character highlighting)\",\n    \"(again, with no per-character highlighting)\",\n    'Finally, if you\\'re working with large documents, consider keeping',\n    '\"Delayed Computation\" on, as it will wait until you stop typing before',\n    'recomputing the differences, instead of after each keystroke.'\n];\n\nconst oldDocument = [\n    \"Hello World!\",\n    \"Have fun playing around with my implementation of a text diff tool,\",\n    \"based off of the Wagner–Fischer DP algorithm for calculating\",\n    \"the edit distance between two strings.\",\n    \"I have tried to display differences in an easy-to-read format, by grouping\",\n    \"contiguous operations together, and by highlighting small differences between\",\n    \"similar lines (as seen above).\",\n    \"(with no per-character highlighting)\",\n    \"And deleted lines appear like this\",\n    \"(again, with no per-character highlighting)\",\n    'Finally, if you\\'re working with large documents, consider keeping',\n    '\"Delayed Computation\" on, as it will wait until you stop typing before',\n    'recomputing the differences, instead of after each keystroke.'\n];\n\nclass App extends Component {\n    state = {\n        newDocument: newDocument,\n        oldDocument: oldDocument,\n        editDistance: new EditDistance(newDocument, oldDocument),\n        delayedComputation: true,\n        diffStateString: \"Done\"\n    };\n\n    constructor() {\n        super();\n        this.computeDiffTimer = null;\n        this.processingTimer = null;\n\n        this.toggleDelayedComputation = this.toggleDelayedComputation.bind(this);\n        this.triggerDiffComputation = this.triggerDiffComputation.bind(this);\n        this.recomputeDiff = this.recomputeDiff.bind(this);\n        this.updateDocument = this.updateDocument.bind(this);\n        this.updateDiffStateString = this.updateDiffStateString.bind(this);\n    }\n\n    triggerDiffComputation() {\n        clearTimeout(this.computeDiffTimer);\n        if (this.state.delayedComputation) {\n            this.updateDiffStateString(\"Waiting\");\n            this.computeDiffTimer = setTimeout(() => {\n                this.recomputeDiff();\n            }, 1000);\n        } else {\n            this.recomputeDiff();\n        }\n    }\n\n    recomputeDiff() {\n        this.updateDiffStateString(\"Processing\");\n        clearTimeout(this.processingTimer);\n        this.processingTimer = setTimeout(() => {\n            let { newDocument, oldDocument } = this.state;\n            let newEditDistance = new EditDistance(newDocument, oldDocument)\n            this.setState({\n                editDistance: newEditDistance\n            });\n            this.updateDiffStateString(\"Done\");\n        }, 100);\n    }\n\n    updateDocument(target, updateNewDocument = true) {\n        let { newDocument, oldDocument } = this.state;\n        this.setState({\n            newDocument: updateNewDocument ? target.value.split('\\n') : newDocument,\n            oldDocument: updateNewDocument ? oldDocument : target.value.split('\\n')\n        });\n        this.triggerDiffComputation();\n    }\n\n    toggleDelayedComputation() {\n        this.setState({\n            delayedComputation: !this.state.delayedComputation\n        });\n    }\n\n    updateDiffStateString(newState) {\n        this.setState({\n            diffStateString: newState\n        });\n    }\n\n    render() {\n        return (\n            <>\n                <Normalize />\n                {\n                    <>\n                        <Title/>\n                        \n                        <Box\n                            width={1}\n                            height={100}\n                            px={{xs:3, md: 6}}\n                            py={3}>\n                                <Description/>\n                                <TextInputs\n                                    newDocument={newDocument.join('\\n')}\n                                    oldDocument={oldDocument.join('\\n')}\n                                    updateDocument={this.updateDocument}/>\n                                <DiffContainer\n                                    editDistance={this.state.editDistance}\n                                    delayedComputation={this.state.delayedComputation}\n                                    toggleDelayedComputation={this.toggleDelayedComputation}\n                                    diffStateString={this.state.diffStateString}/>\n                        </Box>\n                    </>\n                }\n            </>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ThemeProvider } from '@xstyled/styled-components'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst theme = {\n    colors: {\n      text: '#000',\n      background: '#fff',\n      primary: '#17A2B8',\n      modes: {\n        dark: {\n          text: '#fff',\n          background: '#000',\n          primary: '#0cf',\n        },\n      },\n    },\n  }\n\nReactDOM.render(\n    <ThemeProvider theme={theme}>\n            <App />\n    </ThemeProvider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}