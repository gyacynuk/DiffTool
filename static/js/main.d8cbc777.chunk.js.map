{"version":3,"sources":["editdistance/EditDistance.js","components/DiffLine.js","editdistance/EditEntity.js","App.js","serviceWorker.js","index.js"],"names":["EditOperation","Object","freeze","computeEditDistanceMatrix","newWord","oldWord","m","length","n","matrix","Array","i","createMatrix","j","diffPenalty","Math","min","getEditCost","editMatrix","row","col","Number","POSITIVE_INFINITY","Edit","operation","symbol","secondarySymbol","this","EditDistance","minEditDistance","fullEdits","edits","insertCost","deleteCost","maybeReplaceCost","minEditCost","currentIndexCost","push","REPLACE","NONE","INSERT","DELETE","reverse","computeEdits","filter","edit","disjointReplacements","prevOperation","Line","styled","div","props","LineEntity","span","LineNum","LineReplace","DiffLine","editEntity","entityNumber","subEditEntities","operator","line","map","subEdit","key","Component","MAX_DISJOINT_REPLACEMENTS","peekEntityNumber","array","NEGATIVE_INFINITY","popMaxGroup","editsByOperation","prevEntityNumber","maxDelete","maxInsert","maxNone","maxEntityNumber","max","pop","toEditEntities","editDistance","entities","entityNum","forEach","number","subEditDistance","getNumDisjointReplacements","EditEntity","insertSubEditEntities","deleteSubEditEntities","mapToEditEntities","editEntities","reduce","acc","curr","1","2","3","4","orderedEntities","count","currEntity","groupByContiguousOperation","newDocument","oldDocument","HalfScreenView","TextArea","textarea","App","state","target","updateNewDocument","value","split","setState","text","className","href","rel","onChange","event","updateDocument","join","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d8cbc777.chunk.js","sourcesContent":["export const EditOperation = Object.freeze({\"INSERT\":1, \"DELETE\":2, \"REPLACE\":3, \"NONE\":4});\n\n/**\n * Create an empty m x n matrix (m rows, n columns).\n * @param {*} m number of rows.\n * @param {*} n number of columns.\n */\nfunction createMatrix(m, n) {\n    let matrix = new Array(n);\n    for (let i = 0; i < n; i++) {\n        matrix[i] = new Array(m);\n    }\n    return matrix;\n}\n\n/**\n * \n * @param {*} newWord \n * @param {*} oldWord \n * @returns {number[][]}\n */\nfunction computeEditDistanceMatrix(newWord, oldWord) {\n    let m = newWord.length + 1;\n    let n = oldWord.length + 1;\n    let matrix = createMatrix(m, n);\n\n    // Populate base-case values\n    matrix[0][0] = 0;\n    for (let i = 1; i < m; i ++) {\n        matrix[0][i] = matrix[0][i-1] + 1;\n    }\n    for (let i = 1; i < n; i ++) {\n        matrix[i][0] = matrix[i-1][0] + 1;\n    }\n\n    // Compute values across scanline\n    for (let i = 1; i < m; i ++) {\n        for (let j = 1; j < n; j ++) {\n            var diffPenalty = 0;\n            if (newWord[i-1] !== oldWord[j-1]) {\n                diffPenalty = 1;\n            }\n            matrix[j][i] = Math.min(matrix[j-1][i], matrix[j][i-1], matrix[j-1][i-1]) + diffPenalty;\n        }\n    }\n\n    return matrix;\n}\n\nfunction getEditCost(editMatrix, row, col) {\n    if (col < 0 || col >= editMatrix.length) {\n        return Number.POSITIVE_INFINITY;\n    } else if (row < 0 || row >= editMatrix[0].length) {\n        return Number.POSITIVE_INFINITY;\n    } else {\n        return editMatrix[col][row];\n    }\n}\n\nfunction computeEdits(editMatrix, newWord, oldWord) {\n    let edits = [];\n    let j = newWord.length;\n    let i = oldWord.length;\n\n    while (i !== 0 || j !== 0) {\n        let insertCost = getEditCost(editMatrix, j - 1, i);\n        let deleteCost = getEditCost(editMatrix, j, i - 1);\n        let maybeReplaceCost = getEditCost(editMatrix, j - 1, i - 1);\n\n        let minEditCost = Math.min(insertCost, deleteCost, maybeReplaceCost);\n        if (minEditCost === maybeReplaceCost) {\n            let currentIndexCost = getEditCost(editMatrix, j, i);\n            j--;\n            i--;\n            if (maybeReplaceCost < currentIndexCost) {\n                edits.push(new Edit(EditOperation.REPLACE, newWord[j], oldWord[i]));\n            } else {\n                edits.push(new Edit(EditOperation.NONE, newWord[j]))\n            }\n        } else if (minEditCost === insertCost) {\n            j --;\n            edits.push(new Edit(EditOperation.INSERT, newWord[j]));\n            \n        } else {\n            i --;\n            edits.push(new Edit(EditOperation.DELETE, oldWord[i]));\n        }\n    }\n\n    return edits.reverse();\n}\n\nexport class Edit {\n    constructor(operation, symbol, secondarySymbol = null) {\n        this.operation = operation;\n        this.symbol = symbol;\n        this.secondarySymbol = secondarySymbol;\n    }\n}\n\nexport class EditDistance {\n\n    constructor(newWord, oldWord) {\n        this.newWord = newWord;\n        this.oldWord = oldWord;\n\n        let editMatrix = computeEditDistanceMatrix(newWord, oldWord);\n        this.minEditDistance = editMatrix[oldWord.length][newWord.length];\n        this.fullEdits = computeEdits(editMatrix, newWord, oldWord);\n        this.edits = this.fullEdits.filter(edit => edit.operation !== EditOperation.NONE);\n    }\n\n    getNumDisjointReplacements() {\n        if (this.fullEdits.length === 0) {\n            return 0;\n        }\n\n        let disjointReplacements = 0;\n        let prevOperation = null;\n        for (let i = 0; i < this.fullEdits.length; i++) {\n            const { operation } = this.fullEdits[i];\n            if (operation === EditOperation.REPLACE && prevOperation !== EditOperation.REPLACE) {\n                disjointReplacements ++;\n            }\n            prevOperation = operation;\n        }\n\n        return disjointReplacements;\n    }\n\n}\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport { EditOperation } from '../editdistance/EditDistance'\n\nconst Line = styled.div`\n    width: 100%;\n    height: auto;\n    text-align: left;\n    font-family: 'Inconsolata', monospace;\n\n    ${props => {\n        if (props.operation === EditOperation.INSERT) {\n            return \"background-color: #daffd9\";\n        } else if (props.operation === EditOperation.DELETE) {\n            return \"background-color: #ffd9df\";\n        }\n    }};\n`;\n\nconst LineEntity = styled.span`\n    padding: 2px 8px;\n    display: inline-block;\n    white-space: pre;\n`;\n\nconst LineNum = styled(LineEntity)`\n    padding-right: 16px;\n    color: #AAA;\n    background-color: rgba(0, 0, 0, .1);\n`;\n\nconst LineReplace = styled.span`\n    ${props => {\n        if (props.operation === EditOperation.INSERT) {\n            return \"background-color: #a8f7a6\";\n        } else if (props.operation === EditOperation.DELETE) {\n            return \"background-color: #f7a6a6\";\n        }\n    }};\n`;\n\n\nclass DiffLine extends Component {\n\n    render() {\n        const { operation, symbol, entityNumber, subEditEntities } = this.props.editEntity\n\n        let operator = <div>&nbsp;</div>;\n        if (operation === EditOperation.INSERT) {\n            operator = '+';\n        } else if (operation === EditOperation.DELETE) {\n            operator = '-';\n        }\n\n        let line =\n            <LineEntity operation={operation}>\n                {symbol}\n            </LineEntity>;\n        if (subEditEntities) {\n            line =\n                <LineEntity operation={operation}>\n                    {subEditEntities.map((subEdit, i) => {\n                        return <LineReplace operation={subEdit.operation} key={i}>{subEdit.symbol}</LineReplace>\n                    })}\n                </LineEntity>;\n        }\n        \n        return (\n            <Line operation={operation}>\n                <LineNum operation={operation}>\n                    {entityNumber}\n                </LineNum>\n                <LineEntity operation={operation}>\n                    {operator}\n                </LineEntity>\n                {line}\n            </Line>\n        )\n    }\n\n}\n\nexport default DiffLine;","import { Edit, EditOperation, EditDistance } from './EditDistance'\n\nconst MAX_DISJOINT_REPLACEMENTS = 3;\n\n/**\n * \n * @param {Edit} edit \n * @param {Number} number \n * @returns {EditEntity[]}\n */\nfunction mapToEditEntities(edit, number) {\n    const { operation, symbol, secondarySymbol } = edit;\n    if (operation === EditOperation.REPLACE) {\n        let subEditDistance = new EditDistance(symbol, secondarySymbol);\n\n        // If there are too many disjoint replacements, then do not do subEditEnitity micro-highlighting\n        if (subEditDistance.getNumDisjointReplacements() > MAX_DISJOINT_REPLACEMENTS) {\n            return [\n                new EditEntity(EditOperation.INSERT, symbol, number),\n                new EditEntity(EditOperation.DELETE, secondarySymbol, number),\n            ]\n        }\n        // Otherwise process the pair of symbols again to compare their differences, used for micro-highlighting\n        else {\n            let insertSubEditEntities = subEditDistance.fullEdits\n                .map(edit => edit.operation === EditOperation.REPLACE\n                    ? new Edit(EditOperation.INSERT, edit.symbol)\n                    : edit)\n                .filter(subEdit => subEdit.operation !== EditOperation.DELETE);\n            let deleteSubEditEntities = subEditDistance.fullEdits\n                .map(edit => edit.operation === EditOperation.REPLACE\n                    ? new Edit(EditOperation.DELETE, edit.secondarySymbol)\n                    : edit)\n                .filter(subEdit => subEdit.operation !== EditOperation.INSERT);\n            return [\n                new EditEntity(EditOperation.INSERT, symbol, number, insertSubEditEntities),\n                new EditEntity(EditOperation.DELETE, secondarySymbol, number, deleteSubEditEntities)\n            ]\n        }\n    }\n    else if (operation === EditOperation.INSERT) {\n        return [new EditEntity(operation, symbol, number)]\n    } \n    else {\n        return [new EditEntity(operation, symbol, number)]\n    }\n}\n\n/**\n * \n * @param {EditEntity[]} array \n */\nfunction peekEntityNumber(array) {\n    if (array.length > 0) {\n        return array[array.length-1].entityNumber;\n    }\n    return Number.NEGATIVE_INFINITY;\n}\n\nfunction popMaxGroup(editsByOperation, prevEntityNumber) {\n    let maxDelete = peekEntityNumber(editsByOperation[EditOperation.DELETE]);\n    let maxInsert = peekEntityNumber(editsByOperation[EditOperation.INSERT]);\n    let maxNone = peekEntityNumber(editsByOperation[EditOperation.NONE]);\n    let maxEntityNumber = Math.max(maxDelete, maxInsert, maxNone);\n\n    if (maxDelete === prevEntityNumber - 1) {\n        return editsByOperation[EditOperation.DELETE].pop();\n    } else if  (maxInsert === prevEntityNumber - 1) {\n        return editsByOperation[EditOperation.INSERT].pop();\n    }\n    \n    if (maxEntityNumber === maxDelete) {\n        return editsByOperation[EditOperation.DELETE].pop();\n    } else if (maxEntityNumber === maxInsert) {\n        return editsByOperation[EditOperation.INSERT].pop();\n    } else {\n        return editsByOperation[EditOperation.NONE].pop();\n    }\n}\n\nfunction groupByContiguousOperation(editEntities) {\n    // Build accumulator as a map with an empty array present for all possible keys\n    let accumulator = { 1: [], 2:[], 3:[], 4: [] }\n\n    // Group edits using operation as key\n    let editsByOperation = editEntities.reduce((acc, curr) => {\n        let op = curr.operation;\n        acc[op].push(curr);\n        return acc;\n    }, accumulator);\n\n    let orderedEntities = []\n    let prevEntityNumber = editEntities.length;\n    for (let count = 0; count < editEntities.length; count ++) {\n        let currEntity = popMaxGroup(editsByOperation, prevEntityNumber);\n        orderedEntities.push(currEntity);\n        prevEntityNumber = currEntity.entityNumber;\n    }\n    return orderedEntities.reverse();\n}\n\n/**\n * \n * @param {EditDistance} editDistance \n * @returns {EditEntity[]}\n */\nexport function toEditEntities(editDistance) {\n    let entities = [];\n    let entityNum = 1;\n    editDistance.fullEdits.forEach(edit => {\n        entities.push(...mapToEditEntities(edit, entityNum))\n        entityNum ++;\n    });\n    return groupByContiguousOperation(entities);\n}\n\nexport class EditEntity {\n\n    constructor(operation, symbol, entityNumber, subEditEntities = null) {\n        this.operation = operation;\n        this.symbol = symbol;\n        this.entityNumber = entityNumber;\n        this.subEditEntities = subEditEntities;\n    }\n\n}\n","import React, { Component } from 'react';\nimport DiffLine from './components/DiffLine'\nimport { EditDistance } from './editdistance/EditDistance'\nimport { toEditEntities } from './editdistance/EditEntity'\nimport styled from \"styled-components\";\nimport './App.css';\n\nconst newDocument = [\n    \"Hello World!\",\n    \"Please enjoy playing around with my attempt at a text diff tool!\",\n    \"It will try to display differences in an easy-to-read format,\",\n    \"by doing things such as grouping blocks of contiguous edits together (as seen above),\",\n    \"or by highlighting micro-differences between lines (as seen here).\",\n    \"If a line requires more than 3 replacements, then it will not be highlighted, as things can get messy.\",\n    \"Instead, the two lines will be treated as disjoint insertions and deletions, as seen below:\",\n    \"I have fixed typos here as an example ;)\",\n    \"This heuristic seems to work well in most cases.\"\n];\n\nconst oldDocument = [\n    \"Hello!\",\n    \"Please enjoy trying out my attempt at a text diff tool!\",\n    \"It will try to display differences in an easy-to-read format,\",\n    \"by doing things such as grouping blocks of contiguous edits together (as seen above),\",\n    \"or by highlighting small differences between lines (as seen here).\",\n    \"If a line requires more than 3 replacements, then it will not be highlighted, as things can get messy.\",\n    \"Instead, the two lines will be treated as disjoint insertions and deletions, as seen below:\",\n    \"i ficed typos ans an excmple :)\",\n    \"This hueristic seeems to wok well in most caces.\"\n];\n\n\nconst HalfScreenView = styled.div`\n    display: inline-block;\n    width: 50%;\n`;\n\nconst TextArea = styled.textarea`\n    width: 100%;\n    height: 180px;\n`;\n\nclass App extends Component {\n    state = {\n        newDocument: newDocument,\n        oldDocument: oldDocument,\n        editDistance: new EditDistance(newDocument, oldDocument)\n    };\n\n    updateDocument(target, updateNewDocument = true) {\n        let { newDocument, oldDocument } = this.state;\n        if (updateNewDocument) {\n            newDocument = target.value.split('\\n');\n        } else {\n            oldDocument =  target.value.split('\\n');\n        }\n        this.setState({\n            newDocument: newDocument,\n            oldDocument: oldDocument,\n            editDistance: new EditDistance(newDocument, oldDocument)\n        });\n    }\n\n    updateOldDocument(text) {\n        let oldDocument = text.split('\\n')\n        this.setState({\n            newDocument: newDocument,\n            oldDocument: oldDocument,\n            editDistance: new EditDistance(newDocument, oldDocument)\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <span className=\"App-header-title\">\n                        Minimal Levenshtein Distance Difference Tool\n                    </span>\n                    <p>\n                        Project by&nbsp;\n                        <a className=\"App-link\"\n                        href=\"https://www.linkedin.com/in/griffin-yacynuk/\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\">\n                            Griffin Yacynuk\n                        </a>\n                    </p>\n                </header>\n                <div>\n\n                <HalfScreenView>\n                    <TextArea \n                        onChange={event => this.updateDocument(event.target, true)}\n                        value={this.state.newDocument.join('\\n')}\n                    />\n                </HalfScreenView>\n                <HalfScreenView>\n                    <TextArea \n                        onChange={event => this.updateDocument(event.target, false)}\n                        value={this.state.oldDocument.join('\\n')}\n                    />\n                </HalfScreenView>\n                </div>\n                <div>\n                    {\n                        toEditEntities(this.state.editDistance)\n                            .map((editEntity, i) => <DiffLine editEntity={editEntity} key={i}/>)\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}