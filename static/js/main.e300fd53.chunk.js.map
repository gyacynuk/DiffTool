{"version":3,"sources":["editdistance/EditDistance.js","components/DiffLine.js","editdistance/EditEntity.js","App.js","serviceWorker.js","index.js"],"names":["EditOperation","Object","freeze","createMatrix","m","n","matrix","Array","i","getEditCost","editMatrix","row","col","length","Number","POSITIVE_INFINITY","Edit","operation","symbol","secondarySymbol","this","EditDistance","newWord","oldWord","document","newDocument","oldDocument","j","diffPenalty","minEditDistance","Math","min","computeDocumentEditDistanceMatrix","computeEditDistanceMatrix","fullEdits","edits","insertCost","deleteCost","maybeReplaceCost","minEditCost","currentIndexCost","push","REPLACE","NONE","INSERT","DELETE","reverse","computeEdits","filter","edit","disjointReplacements","prevOperation","Line","styled","div","props","LineEntity","span","LineNum","LineReplace","DiffLine","editEntity","entityNumber","subEditEntities","operator","line","map","subEdit","key","Component","peekEntityNumber","array","NEGATIVE_INFINITY","popMaxGroup","editsByOperation","prevEntityNumber","maxDelete","maxInsert","maxNone","maxEntityNumber","max","pop","toEditEntities","editDistance","entities","entityNum","forEach","number","subEditDistance","insertSubEditEntities","deleteSubEditEntities","EditEntity","mapToEditEntities","editEntities","reduce","acc","curr","1","2","3","4","orderedEntities","count","currEntity","groupByContiguousOperation","HalfScreenView","TextArea","textarea","App","state","target","updateNewDocument","value","split","setState","text","className","href","rel","onChange","event","updateDocument","join","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e300fd53.chunk.js","sourcesContent":["export const EditOperation = Object.freeze({\"INSERT\":1, \"DELETE\":2, \"REPLACE\":3, \"NONE\":4});\n\n/**\n * Create an empty m x n matrix (m rows, n columns).\n * @param {*} m number of rows.\n * @param {*} n number of columns.\n */\nfunction createMatrix(m, n) {\n    let matrix = new Array(n);\n    for (let i = 0; i < n; i++) {\n        matrix[i] = new Array(m);\n    }\n    return matrix;\n}\n\n/**\n * \n * @param {*} newWord \n * @param {*} oldWord \n * @returns {number[][]}\n */\nfunction computeEditDistanceMatrix(newWord, oldWord) {\n    let m = newWord.length + 1;\n    let n = oldWord.length + 1;\n    let matrix = createMatrix(m, n);\n\n    // Populate base-case values\n    matrix[0][0] = 0;\n    for (let i = 1; i < m; i ++) {\n        matrix[0][i] = matrix[0][i-1] + 1;\n    }\n    for (let i = 1; i < n; i ++) {\n        matrix[i][0] = matrix[i-1][0] + 1;\n    }\n\n    // Compute values across scanline\n    for (let i = 1; i < m; i ++) {\n        for (let j = 1; j < n; j ++) {\n            var diffPenalty = 0;\n            if (newWord[i-1] !== oldWord[j-1]) {\n                diffPenalty = 1;\n            }\n            matrix[j][i] = Math.min(\n                matrix[j-1][i],\n                matrix[j][i-1],\n                matrix[j-1][i-1]) + diffPenalty;\n        }\n    }\n\n    return matrix;\n}\n\nfunction computeDocumentEditDistanceMatrix(newDocument, oldDocument) {\n    let m = newDocument.length + 1;\n    let n = oldDocument.length + 1;\n    let matrix = createMatrix(m, n);\n\n    // Populate base-case values\n    matrix[0][0] = 0;\n    for (let i = 1; i < m; i ++) {\n        matrix[0][i] = matrix[0][i-1] + newDocument[i-1].length;\n    }\n    for (let j = 1; j < n; j++) {\n        matrix[j][0] = matrix[j-1][0] + oldDocument[j-1].length;\n    }\n\n    // Compute values across scanline\n    for (let i = 1; i < m; i ++) {\n        for (let j = 1; j < n; j ++) {\n            let diffPenalty = 0;\n            if (newDocument[i-1] !== oldDocument[j-1]) {\n                diffPenalty = new EditDistance(newDocument[i-1], oldDocument[j-1], false).minEditDistance;\n            }\n            matrix[j][i] = Math.min(\n                matrix[j-1][i] + oldDocument[j-1].length,\n                matrix[j][i-1] + newDocument[i-1].length,\n                matrix[j-1][i-1] + diffPenalty) ;\n        }\n    }\n\n    return matrix;\n}\n\nfunction getEditCost(editMatrix, row, col) {\n    if (col < 0 || col >= editMatrix.length) {\n        return Number.POSITIVE_INFINITY;\n    } else if (row < 0 || row >= editMatrix[0].length) {\n        return Number.POSITIVE_INFINITY;\n    } else {\n        return editMatrix[col][row];\n    }\n}\n\nfunction computeEdits(editMatrix, newWord, oldWord) {\n    let edits = [];\n    let j = newWord.length;\n    let i = oldWord.length;\n\n    while (i !== 0 || j !== 0) {\n        let insertCost = getEditCost(editMatrix, j - 1, i);\n        let deleteCost = getEditCost(editMatrix, j, i - 1);\n        let maybeReplaceCost = getEditCost(editMatrix, j - 1, i - 1);\n\n        let minEditCost = Math.min(insertCost, deleteCost, maybeReplaceCost);\n        if (minEditCost === maybeReplaceCost) {\n            let currentIndexCost = getEditCost(editMatrix, j, i);\n            j--;\n            i--;\n            if (maybeReplaceCost < currentIndexCost) {\n                edits.push(new Edit(EditOperation.REPLACE, newWord[j], oldWord[i]));\n            } else {\n                edits.push(new Edit(EditOperation.NONE, newWord[j]))\n            }\n        } else if (minEditCost === insertCost) {\n            j --;\n            edits.push(new Edit(EditOperation.INSERT, newWord[j]));\n            \n        } else {\n            i --;\n            edits.push(new Edit(EditOperation.DELETE, oldWord[i]));\n        }\n    }\n\n    return edits.reverse();\n}\n\nexport class Edit {\n    constructor(operation, symbol, secondarySymbol = null) {\n        this.operation = operation;\n        this.symbol = symbol;\n        this.secondarySymbol = secondarySymbol;\n    }\n}\n\nexport class EditDistance {\n\n    constructor(newWord, oldWord, document = true) {\n        this.newWord = newWord;\n        this.oldWord = oldWord;\n\n        let editMatrix = document ? computeDocumentEditDistanceMatrix(newWord, oldWord) : computeEditDistanceMatrix(newWord, oldWord);\n        this.minEditDistance = editMatrix[oldWord.length][newWord.length];\n        this.fullEdits = computeEdits(editMatrix, newWord, oldWord);\n        this.edits = this.fullEdits.filter(edit => edit.operation !== EditOperation.NONE);\n    }\n\n    getNumDisjointReplacements() {\n        if (this.fullEdits.length === 0) {\n            return 0;\n        }\n\n        let disjointReplacements = 0;\n        let prevOperation = null;\n        for (let i = 0; i < this.fullEdits.length; i++) {\n            const { operation } = this.fullEdits[i];\n            if (operation === EditOperation.REPLACE && prevOperation !== EditOperation.REPLACE) {\n                disjointReplacements ++;\n            }\n            prevOperation = operation;\n        }\n\n        return disjointReplacements;\n    }\n\n}\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport { EditOperation } from '../editdistance/EditDistance'\n\nconst Line = styled.div`\n    width: 100%;\n    height: auto;\n    text-align: left;\n    font-family: 'Inconsolata', monospace;\n\n    ${props => {\n        if (props.operation === EditOperation.INSERT) {\n            return \"background-color: #daffd9\";\n        } else if (props.operation === EditOperation.DELETE) {\n            return \"background-color: #ffd9df\";\n        }\n    }};\n`;\n\nconst LineEntity = styled.span`\n    padding: 2px 8px;\n    display: inline-block;\n    white-space: pre;\n`;\n\nconst LineNum = styled(LineEntity)`\n    width: 32px;\n    padding-right: 8px;\n    padding-left: 0px;\n    text-align: right;\n    color: #AAA;\n    background-color: rgba(0, 0, 0, .1);\n`;\n\nconst LineReplace = styled.span`\n    ${props => {\n        if (props.operation === EditOperation.INSERT) {\n            return \"background-color: #a8f7a6\";\n        } else if (props.operation === EditOperation.DELETE) {\n            return \"background-color: #f7a6a6\";\n        }\n    }};\n`;\n\n\nclass DiffLine extends Component {\n\n    render() {\n        const { operation, symbol, entityNumber, subEditEntities } = this.props.editEntity\n\n        let operator = <div>&nbsp;</div>;\n        if (operation === EditOperation.INSERT) {\n            operator = '+';\n        } else if (operation === EditOperation.DELETE) {\n            operator = '-';\n        }\n\n        let line =\n            <LineEntity operation={operation}>\n                {symbol}\n            </LineEntity>;\n        if (subEditEntities) {\n            line =\n                <LineEntity operation={operation}>\n                    {subEditEntities.map((subEdit, i) => {\n                        return <LineReplace operation={subEdit.operation} key={i}>{subEdit.symbol}</LineReplace>\n                    })}\n                </LineEntity>;\n        }\n        \n        return (\n            <Line operation={operation}>\n                <LineNum operation={operation}>\n                    {entityNumber}\n                </LineNum>\n                <LineEntity operation={operation}>\n                    {operator}\n                </LineEntity>\n                {line}\n            </Line>\n        )\n    }\n\n}\n\nexport default DiffLine;","import { Edit, EditOperation, EditDistance } from './EditDistance'\n\n/**\n * \n * @param {Edit} edit \n * @param {Number} number \n * @returns {EditEntity[]}\n */\nfunction mapToEditEntities(edit, number) {\n    const { operation, symbol, secondarySymbol } = edit;\n    if (operation === EditOperation.REPLACE) {\n        let subEditDistance = new EditDistance(symbol, secondarySymbol, false);\n        let insertSubEditEntities = subEditDistance.fullEdits\n            .map(edit => edit.operation === EditOperation.REPLACE\n                ? new Edit(EditOperation.INSERT, edit.symbol)\n                : edit)\n            .filter(subEdit => subEdit.operation !== EditOperation.DELETE);\n        let deleteSubEditEntities = subEditDistance.fullEdits\n            .map(edit => edit.operation === EditOperation.REPLACE\n                ? new Edit(EditOperation.DELETE, edit.secondarySymbol)\n                : edit)\n            .filter(subEdit => subEdit.operation !== EditOperation.INSERT);\n        return [\n            new EditEntity(EditOperation.INSERT, symbol, number, insertSubEditEntities),\n            new EditEntity(EditOperation.DELETE, secondarySymbol, number, deleteSubEditEntities)\n        ]\n    }\n    else if (operation === EditOperation.INSERT) {\n        return [new EditEntity(operation, symbol, number)]\n    } \n    else {\n        return [new EditEntity(operation, symbol, number)]\n    }\n}\n\n/**\n * \n * @param {EditEntity[]} array \n */\nfunction peekEntityNumber(array) {\n    if (array.length > 0) {\n        return array[array.length-1].entityNumber;\n    }\n    return Number.NEGATIVE_INFINITY;\n}\n\nfunction popMaxGroup(editsByOperation, prevEntityNumber) {\n    let maxDelete = peekEntityNumber(editsByOperation[EditOperation.DELETE]);\n    let maxInsert = peekEntityNumber(editsByOperation[EditOperation.INSERT]);\n    let maxNone = peekEntityNumber(editsByOperation[EditOperation.NONE]);\n    let maxEntityNumber = Math.max(maxDelete, maxInsert, maxNone);\n\n    if (maxDelete === prevEntityNumber - 1) {\n        return editsByOperation[EditOperation.DELETE].pop();\n    } else if  (maxInsert === prevEntityNumber - 1) {\n        return editsByOperation[EditOperation.INSERT].pop();\n    }\n    \n    if (maxEntityNumber === maxDelete) {\n        return editsByOperation[EditOperation.DELETE].pop();\n    } else if (maxEntityNumber === maxInsert) {\n        return editsByOperation[EditOperation.INSERT].pop();\n    } else {\n        return editsByOperation[EditOperation.NONE].pop();\n    }\n}\n\nfunction groupByContiguousOperation(editEntities) {\n    // Build accumulator as a map with an empty array present for all possible keys\n    let accumulator = { 1: [], 2:[], 3:[], 4: [] }\n\n    // Group edits using operation as key\n    let editsByOperation = editEntities.reduce((acc, curr) => {\n        let op = curr.operation;\n        acc[op].push(curr);\n        return acc;\n    }, accumulator);\n\n    let orderedEntities = []\n    let prevEntityNumber = editEntities.length;\n    for (let count = 0; count < editEntities.length; count ++) {\n        let currEntity = popMaxGroup(editsByOperation, prevEntityNumber);\n        orderedEntities.push(currEntity);\n        prevEntityNumber = currEntity.entityNumber;\n    }\n    return orderedEntities.reverse();\n}\n\n/**\n * \n * @param {EditDistance} editDistance \n * @returns {EditEntity[]}\n */\nexport function toEditEntities(editDistance) {\n    let entities = [];\n    let entityNum = 1;\n    editDistance.fullEdits.forEach(edit => {\n        entities.push(...mapToEditEntities(edit, entityNum))\n        entityNum ++;\n    });\n    return groupByContiguousOperation(entities);\n}\n\nexport class EditEntity {\n\n    constructor(operation, symbol, entityNumber, subEditEntities = null) {\n        this.operation = operation;\n        this.symbol = symbol;\n        this.entityNumber = entityNumber;\n        this.subEditEntities = subEditEntities;\n    }\n\n}\n","import React, { Component } from 'react';\nimport DiffLine from './components/DiffLine'\nimport { EditDistance } from './editdistance/EditDistance'\nimport { toEditEntities } from './editdistance/EditEntity'\nimport styled from \"styled-components\";\nimport './App.css';\n\nconst newDocument = [\n    \"Hello World!\",\n    \"Please enjoy playing around with my attempt at a text diff tool!\",\n    \"It will try to display differences in an easy-to-read format,\",\n    \"by doing things such as grouping blocks of contiguous edits together (as seen above),\",\n    \"or by highlighting micro-differences between lines (as seen here).\",\n    \"If a line requires more than 3 replacements, then it will not be highlighted, as things can get messy.\",\n    \"Instead, the two lines will be treated as disjoint insertions and deletions, as seen below:\",\n    \"I have fixed typos here as an example ;)\",\n    \"This heuristic seems to work well in most cases.\"\n];\n\nconst oldDocument = [\n    \"Hello!\",\n    \"Please enjoy trying out my attempt at a text diff tool!\",\n    \"It will try to display differences in an easy-to-read format,\",\n    \"by doing things such as grouping blocks of contiguous edits together (as seen above),\",\n    \"or by highlighting small differences between lines (as seen here).\",\n    \"If a line requires more than 3 replacements, then it will not be highlighted, as things can get messy.\",\n    \"Instead, the two lines will be treated as disjoint insertions and deletions, as seen below:\",\n    \"i ficed typos ans an excmple :)\",\n    \"This hueristic seeems to wok well in most caces.\"\n];\n\n\nconst HalfScreenView = styled.div`\n    display: inline-block;\n    width: 50%;\n`;\n\nconst TextArea = styled.textarea`\n    width: 100%;\n    height: 180px;\n`;\n\nclass App extends Component {\n    state = {\n        newDocument: newDocument,\n        oldDocument: oldDocument,\n        editDistance: new EditDistance(newDocument, oldDocument)\n    };\n\n    updateDocument(target, updateNewDocument = true) {\n        let { newDocument, oldDocument } = this.state;\n        if (updateNewDocument) {\n            newDocument = target.value.split('\\n');\n        } else {\n            oldDocument =  target.value.split('\\n');\n        }\n        this.setState({\n            newDocument: newDocument,\n            oldDocument: oldDocument,\n            editDistance: new EditDistance(newDocument, oldDocument)\n        });\n    }\n\n    updateOldDocument(text) {\n        let oldDocument = text.split('\\n')\n        this.setState({\n            newDocument: newDocument,\n            oldDocument: oldDocument,\n            editDistance: new EditDistance(newDocument, oldDocument)\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <span className=\"App-header-title\">\n                        Minimal Levenshtein Distance Difference Tool\n                    </span>\n                    <p>\n                        Project by&nbsp;\n                        <a className=\"App-link\"\n                        href=\"https://www.linkedin.com/in/griffin-yacynuk/\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\">\n                            Griffin Yacynuk\n                        </a>\n                    </p>\n                </header>\n                <div>\n\n                <HalfScreenView>\n                    <TextArea \n                        onChange={event => this.updateDocument(event.target, true)}\n                        value={this.state.newDocument.join('\\n')}\n                    />\n                </HalfScreenView>\n                <HalfScreenView>\n                    <TextArea \n                        onChange={event => this.updateDocument(event.target, false)}\n                        value={this.state.oldDocument.join('\\n')}\n                    />\n                </HalfScreenView>\n                </div>\n                <div>\n                    {\n                        toEditEntities(this.state.editDistance)\n                            .map((editEntity, i) => <DiffLine editEntity={editEntity} key={i}/>)\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}