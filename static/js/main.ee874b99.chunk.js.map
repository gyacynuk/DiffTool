{"version":3,"sources":["assets/edit_distance.png","assets/matrix.png","components/Title.js","components/TextInputs.js","components/Shared.js","components/Description.js","editdistance/EditDistance.js","editdistance/EditEntity.js","components/DiffLine.js","components/DiffContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TitleText","styled","Text","TitleLink","Title","backgroundColor","width","p","variant","forwardedAs","href","target","rel","row","justifyContent","col","mx","className","Component","CodeTextArea","Textarea","TextInputs","xs","md","scale","rows","defaultValue","this","props","newDocument","onChange","event","updateDocument","oldDocument","RoundBoxer","Box","Image","img","CodeText","Description","mt","sm","src","edit_distance","type","color","matrix","EditOperation","Object","freeze","createMatrix","m","n","Array","i","getEditCost","editMatrix","length","Number","POSITIVE_INFINITY","Edit","operation","symbol","secondarySymbol","EditDistance","newWord","oldWord","document","j","diffPenalty","minEditDistance","Math","min","computeDocumentEditDistanceMatrix","computeEditDistanceMatrix","fullEdits","edits","insertCost","deleteCost","maybeReplaceCost","minEditCost","currentIndexCost","push","REPLACE","NONE","INSERT","DELETE","reverse","computeEdits","filter","edit","disjointReplacements","prevOperation","peekEntityNumber","array","entityNumber","NEGATIVE_INFINITY","popMaxGroup","editsByOperation","prevEntityNumber","maxDelete","maxInsert","maxNone","maxEntityNumber","max","pop","toEditEntities","editDistance","entities","entityNum","forEach","number","subEditDistance","insertSubEditEntities","map","subEdit","deleteSubEditEntities","EditEntity","mapToEditEntities","splitByOperation","editEntities","inserts","deletes","editEntity","subEditEntities","Line","div","LineEntity","LineNum","LineReplace","DiffLine","operator","line","key","LeftMarginLabel","label","Pill","DiffContainer","text","radioState","useRadioState","state","inlineView","mb","reduce","acc","curr","1","2","3","4","orderedEntities","count","currEntity","groupByContiguousOperation","sideView","view","checked","delayedComputation","toggleDelayedComputation","name","verticalAlign","diffStateString","aria-label","py","value","App","computeDiffTimer","processingTimer","bind","triggerDiffComputation","recomputeDiff","updateDiffStateString","clearTimeout","setTimeout","newEditDistance","setState","updateNewDocument","split","newState","height","px","join","Boolean","window","location","hostname","match","ReactDOM","render","theme","colors","background","primary","modes","dark","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ee874b99.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/edit_distance.6aca0a77.png\";","module.exports = __webpack_public_path__ + \"static/media/matrix.6478087f.png\";","import React, { Component } from 'react'\nimport { Box, Text } from '@smooth-ui/core-sc'\nimport styled from '@xstyled/styled-components';\n\nconst TitleText = styled(Text)`\n    color: #FFF;\n    text-align: center;\n`\n\nconst TitleLink = styled(Text)`\n    color: #17A2B8;\n    text-decoration: none;\n`\n\nclass Title extends Component {\n\n    render() {\n        return (\n            <Box\n                backgroundColor=\"#333\"\n                width={1}\n                p={5}>\n                   <TitleText variant=\"h1\">Text Comparison Tool</TitleText>\n                   <TitleText variant=\"h4\">Project by <TitleLink\n                        forwardedAs=\"a\"\n                        href=\"https://www.linkedin.com/in/griffin-yacynuk/\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\">Griffin Yacynuk</TitleLink>\n                    </TitleText>\n                    \n                    <Box row justifyContent={'center'}>\n                        <Box col={\"auto\"}\n                            forwardedAs=\"a\"\n                            href=\"https://www.linkedin.com/in/griffin-yacynuk/\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            mx={2}>\n                            <TitleText variant=\"h4\">\n                                <i className=\"fab fa-linkedin\"></i>\n                            </TitleText>\n                        </Box>\n                        <Box col={\"auto\"}\n                            forwardedAs=\"a\"\n                            href=\"https://github.com/gyacynuk\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            mx={2}>\n                            <TitleText variant=\"h4\">\n                                <i className=\"fab fa-github\"></i>\n                            </TitleText>\n                        </Box>\n                    </Box>\n                    \n    \n                        {/* <i class=\"fab fa-github\"></i> */}\n                    \n            </Box>\n            \n        )\n    }\n}\n\nexport default Title;","import React, { Component } from 'react'\nimport { Box, Textarea, Text } from '@smooth-ui/core-sc'\nimport styled from '@xstyled/styled-components';\n\nconst CodeTextArea = styled(Textarea)` \n    font-family: 'Inconsolata', monospace;\n    white-space: nowrap;\n    overflow: auto;\n`;\n\nclass TextInputs extends Component {\n\n    render() {\n        return (\n            <>\n                <Box row>\n                    <Box \n                        col={{xs: 1, md: 1/2}}\n                        p={2}>\n                            <Text variant=\"h4\">New Document</Text>\n                            <CodeTextArea \n                                scale=\"base\"\n                                rows={10}\n                                defaultValue={this.props.newDocument}\n                                onChange={event => this.props.updateDocument(event.target, true)}/>\n                    </Box>\n                    <Box \n                        col={{xs: 1, md: 1/2}}\n                        p={2}>\n                            <Text variant=\"h4\">Old Document</Text>\n                            <CodeTextArea \n                                scale=\"base\"\n                                rows={10}\n                                defaultValue={this.props.oldDocument}\n                                onChange={event => this.props.updateDocument(event.target, false)}/>\n                    </Box>\n                </Box>\n            </>\n        )\n    }\n}\n\nexport default TextInputs;","import { Box } from '@smooth-ui/core-sc'\nimport styled from '@xstyled/styled-components';\n\nexport const RoundBoxer = styled(Box)`\n    border: 1px solid rgba(0, 0, 0, 0.125);\n    border-radius: 4px;\n    overflow: scroll;\n`;","import React, { Component } from 'react'\nimport { Box, Text, Separator } from '@smooth-ui/core-sc'\nimport { RoundBoxer } from './Shared'\nimport styled from '@xstyled/styled-components';\n// Images\nimport edit_distance from '../assets/edit_distance.png'\nimport matrix from '../assets/matrix.png'\n\nconst Image = styled.img`\n    max-width: 576px;\n    width: 100%;\n    height: auto;\n    object-fit: contain; \n    margin-bottom: -3px;\n`;\n\nconst CodeText = styled(Text)`\n    font-family: 'Inconsolata', monospace;\n`;\n\nclass Description extends Component {\n\n    render() {\n        return (\n            <>\n                <Text variant=\"h2\">Background</Text>\n                <Separator/>\n                <Text variant=\"p\">\n                    This project was inspired by the difficulties a friend of mine was experiencing at\n                    work while trying to build a webpage which compared two JSON files. He wanted to\n                    highlight the differences between the two files and display this to the user, and\n                    he was able to find a component on NPM to do so. However, the component would\n                    naively compare each line from one file with the same line in the other. This was\n                    not ideal, since if one file had additions or deletions, they wouldn't be displayed properly.\n                    Since JSON files are highly structured, he was able to detect insertions or\n                    deletions by comparing the set of keys in each JSON object - then for each\n                    descripency he would insert a corresponding blank line in the other file. When\n                    applied recusively to all nested sub-objects, this approach\n                    fixed the issue, but it got me thinking that <em>there must be a better way to do\n                    this.</em> \n                    <br/>\n                    <br/>\n                    I had a lot of ideas bouncing around in my head, many of which drawn from the book\n                    <em>Algorithms</em> by Sanjoy Dasgupta et al. which I had been reading during my\n                    morning commute. That day I had happened to be reading the chapter on dynamic\n                    programming, and I had the Wagner–Fischer algorithm for solving edit distance\n                    between two string still fresh in my mind. I figured that with some work, I could adapt\n                    that algorithm to instead solve edit distance between two documents instead.\n                    And from that, this project was born. \n                    <br/>\n                    <br/>\n                    If you're interested in how the original edit distance algorithm works, or the steps\n                    I took to adapt it to work with entire documents, then keep reading into the next section.\n                    If instead you want to play around with the algorithm youself, go ahead and scroll to the\n                    bottom of the page for a demo.\n                </Text>\n\n                <Text variant=\"h2\" mt={5}>Algorithm Overview</Text>\n                <Separator/>\n                <Text variant=\"p\">\n                    Edit distance is defined as the minimum number of operations needed to make two strings\n                    equal, where an operation can be:\n                    <ul>\n                        <li>Inserting a new character</li>\n                        <li>Deleting a charcter</li>\n                        <li>Substituting a character for another</li>\n                    </ul>\n                    For instance, given the words <CodeText>Saturday</CodeText> and <CodeText>Sunday</CodeText>,\n                    the edit distance between them is 3; we must insert the letters <CodeText>a</CodeText> and&nbsp;\n                    <CodeText>t</CodeText> to <CodeText>Sunday</CodeText>, and then replace the letter&nbsp;\n                    <CodeText>n</CodeText> with <CodeText>r</CodeText>. I have illistrated this in the \n                    figure below:\n                </Text>\n                <Box row justifyContent={'center'} p={3}>\n                    <RoundBoxer col={{xs:1, sm:\"auto\"}}>\n                        <Image src={edit_distance}/>\n                    </RoundBoxer>\n                </Box> \n                <Text variant=\"p\">\n                    Solving for the edit distance between two strings lends itself well to dynamic programming,\n                    as we can break the problem down into small subproblems which can be reused multiple times.\n                    For instance, let's return to our example above, using the words <CodeText>Saturday</CodeText>\n                    &nbsp;and <CodeText>Sunday</CodeText>. Let's also assume we know that the edit distance for the\n                    following pairs:\n                    <ol type=\"a\">\n                        <li><CodeText>Saturday</CodeText>, <CodeText>Sunda</CodeText></li>\n                        <li><CodeText>Saturda</CodeText>, <CodeText>Sunday</CodeText></li>\n                        <li><CodeText>Saturda</CodeText>, <CodeText>Sunda</CodeText></li>\n                    </ol>\n                    Then we know that the edit distance between <CodeText>Saturday</CodeText> and&nbsp;\n                    <CodeText>Sunday</CodeText> is the minimum of the following:\n                    <ul>\n                        <li>Edit distance a) + 1 to insert <CodeText>y</CodeText> into <CodeText>Sunda</CodeText>, or equivalently delete <CodeText>y</CodeText> from <CodeText>Saturday</CodeText></li>\n                        <li>Edit distance b) + 1 to insert <CodeText>y</CodeText> into <CodeText>Saturda</CodeText>, or equivalently delete <CodeText>y</CodeText> from <CodeText>Sunday</CodeText> </li>\n                        <li>Edit distance c) + 1 the following pair of characters (<CodeText>y, y</CodeText>) are not equal and hence we have to substitue one, or + 0 if they are equal</li>\n                    </ul>\n                    We can generalize this as follows: given two strings denoted as <CodeText>A, B</CodeText>, let <CodeText>d(i, j)</CodeText> denote\n                    the edit distance between the substring of the first <CodeText>i</CodeText> character of <CodeText>A</CodeText> and the\n                    first <CodeText>j</CodeText> characters of <CodeText>B</CodeText>. Then we have:\n                    <br/>\n                    <center><CodeText>d(i, j) = min( d(i-1, j)+1, d(i, j-1)+1, d(i-1, j-1) + diff(A[i], B[j])</CodeText></center>\n                    <br/>\n                    where <CodeText>CodeText(A[i], B[j])</CodeText> is equal to 1 if the characters <CodeText>A[i] = B[j]</CodeText>, otherwise 0.\n \n                </Text>\n\n                <Text variant=\"p\" color={\"#D8D8D8\"}>\n                <i className=\"fas fa-square\" color={\"#D8D8D8\"}></i>\n                </Text>\n                <Text variant=\"p\" color={\"#A8F7A6\"}>\n                <i className=\"fas fa-square\" color={\"#A8F7A6\"}></i>\n                </Text>\n                <Text variant=\"p\" color={\"#A088FF\"}>\n                <i className=\"fas fa-square\" color={\"#A088FF\"}></i>\n                </Text>\n                <Box row justifyContent={'center'} p={3}>\n                    <RoundBoxer col={{xs:1, sm:\"auto\"}}>\n                        <Image src={matrix}/>\n                    </RoundBoxer>\n                </Box> \n\n                <Text variant=\"h2\" mt={5}>Try it Out!</Text>\n                <Separator/>\n            </>\n        )\n    }\n}\n\nexport default Description;","export const EditOperation = Object.freeze({\"INSERT\":1, \"DELETE\":2, \"REPLACE\":3, \"NONE\":4});\n\n/**\n * Create an empty m x n matrix (m rows, n columns).\n * @param {*} m number of rows.\n * @param {*} n number of columns.\n */\nfunction createMatrix(m, n) {\n    let matrix = new Array(n);\n    for (let i = 0; i < n; i++) {\n        matrix[i] = new Array(m);\n    }\n    return matrix;\n}\n\n/**\n * \n * @param {*} newWord \n * @param {*} oldWord \n * @returns {number[][]}\n */\nfunction computeEditDistanceMatrix(newWord, oldWord) {\n    let m = newWord.length + 1;\n    let n = oldWord.length + 1;\n    let matrix = createMatrix(m, n);\n\n    // Populate base-case values\n    matrix[0][0] = 0;\n    for (let i = 1; i < m; i ++) {\n        matrix[0][i] = matrix[0][i-1] + 1;\n    }\n    for (let i = 1; i < n; i ++) {\n        matrix[i][0] = matrix[i-1][0] + 1;\n    }\n\n    // Compute values across scanline\n    for (let i = 1; i < m; i ++) {\n        for (let j = 1; j < n; j ++) {\n            var diffPenalty = 0;\n            if (newWord[i-1] !== oldWord[j-1]) {\n                diffPenalty = 1;\n            }\n            matrix[j][i] = Math.min(\n                matrix[j-1][i],\n                matrix[j][i-1],\n                matrix[j-1][i-1]) + diffPenalty;\n        }\n    }\n\n    return matrix;\n}\n\n// cost of 0 is reserved for perfect matches\nfunction computeDocumentEditDistanceMatrix(newDocument, oldDocument) {\n    let m = newDocument.length + 1;\n    let n = oldDocument.length + 1;\n    let matrix = createMatrix(m, n);\n\n    // Populate base-case values\n    matrix[0][0] = 0;\n    for (let i = 1; i < m; i ++) {\n        matrix[0][i] = matrix[0][i-1] + newDocument[i-1].length + 1;\n    }\n    for (let j = 1; j < n; j++) {\n        matrix[j][0] = matrix[j-1][0] + oldDocument[j-1].length + 1;\n    }\n\n    // Compute values across scanline\n    for (let i = 1; i < m; i ++) {\n        for (let j = 1; j < n; j ++) {\n            let diffPenalty = 0;\n            if (newDocument[i-1] !== oldDocument[j-1]) {\n                diffPenalty = new EditDistance(newDocument[i-1], oldDocument[j-1], false).minEditDistance;\n            } else {\n                diffPenalty = -matrix[j-1][i-1] - 1;\n            }\n            matrix[j][i] = Math.min(\n                matrix[j-1][i] + oldDocument[j-1].length,\n                matrix[j][i-1] + newDocument[i-1].length,\n                matrix[j-1][i-1] + diffPenalty) + 1;\n        }\n    }\n\n    return matrix;\n}\n\nfunction getEditCost(editMatrix, row, col) {\n    if (col < 0 || col >= editMatrix.length) {\n        return Number.POSITIVE_INFINITY;\n    } else if (row < 0 || row >= editMatrix[0].length) {\n        return Number.POSITIVE_INFINITY;\n    } else {\n        return editMatrix[col][row];\n    }\n}\n\nfunction computeEdits(editMatrix, newWord, oldWord) {\n    let edits = [];\n    let j = newWord.length;\n    let i = oldWord.length;\n\n    while (i !== 0 || j !== 0) {\n        if(getEditCost(editMatrix, j, i) === 0) {\n            j--;\n            i--;\n            edits.push(new Edit(EditOperation.NONE, newWord[j]));\n            continue;\n        }\n        let insertCost = getEditCost(editMatrix, j - 1, i);\n        let deleteCost = getEditCost(editMatrix, j, i - 1);\n        let maybeReplaceCost = getEditCost(editMatrix, j - 1, i - 1);\n\n        let minEditCost = Math.min(insertCost, deleteCost, maybeReplaceCost);\n        if (minEditCost === maybeReplaceCost) {\n            let currentIndexCost = getEditCost(editMatrix, j, i);\n            j--;\n            i--;\n            if (maybeReplaceCost < currentIndexCost) {\n                edits.push(new Edit(EditOperation.REPLACE, newWord[j], oldWord[i]));\n            } else {\n                edits.push(new Edit(EditOperation.NONE, newWord[j]))\n            }\n        } else if (minEditCost === insertCost) {\n            j --;\n            edits.push(new Edit(EditOperation.INSERT, newWord[j]));\n            \n        } else {\n            i --;\n            edits.push(new Edit(EditOperation.DELETE, oldWord[i]));\n        }\n    }\n\n    return edits.reverse();\n}\n\nexport class Edit {\n    constructor(operation, symbol, secondarySymbol = null) {\n        this.operation = operation;\n        this.symbol = symbol;\n        this.secondarySymbol = secondarySymbol;\n    }\n}\n\nexport class EditDistance {\n\n    constructor(newWord, oldWord, document = true) {\n        this.newWord = newWord;\n        this.oldWord = oldWord;\n\n        let editMatrix = document ? computeDocumentEditDistanceMatrix(newWord, oldWord) : computeEditDistanceMatrix(newWord, oldWord);\n        this.minEditDistance = editMatrix[oldWord.length][newWord.length];\n        this.fullEdits = computeEdits(editMatrix, newWord, oldWord);\n        this.edits = this.fullEdits.filter(edit => edit.operation !== EditOperation.NONE);\n    }\n\n    getNumDisjointReplacements() {\n        if (this.fullEdits.length === 0) {\n            return 0;\n        }\n\n        let disjointReplacements = 0;\n        let prevOperation = null;\n        for (let i = 0; i < this.fullEdits.length; i++) {\n            const { operation } = this.fullEdits[i];\n            if (operation === EditOperation.REPLACE && prevOperation !== EditOperation.REPLACE) {\n                disjointReplacements ++;\n            }\n            prevOperation = operation;\n        }\n\n        return disjointReplacements;\n    }\n\n}\n","import { Edit, EditOperation, EditDistance } from './EditDistance'\n\n/**\n * \n * @param {Edit} edit \n * @param {Number} number \n * @returns {EditEntity[]}\n */\nfunction mapToEditEntities(edit, number) {\n    const { operation, symbol, secondarySymbol } = edit;\n    if (operation === EditOperation.REPLACE) {\n        let subEditDistance = new EditDistance(symbol, secondarySymbol, false);\n        let insertSubEditEntities = subEditDistance.fullEdits\n            .map(edit => edit.operation === EditOperation.REPLACE\n                ? new Edit(EditOperation.INSERT, edit.symbol)\n                : edit)\n            .filter(subEdit => subEdit.operation !== EditOperation.DELETE);\n        let deleteSubEditEntities = subEditDistance.fullEdits\n            .map(edit => edit.operation === EditOperation.REPLACE\n                ? new Edit(EditOperation.DELETE, edit.secondarySymbol)\n                : edit)\n            .filter(subEdit => subEdit.operation !== EditOperation.INSERT);\n        return [\n            new EditEntity(EditOperation.INSERT, symbol, number, insertSubEditEntities),\n            new EditEntity(EditOperation.DELETE, secondarySymbol, number, deleteSubEditEntities)\n        ]\n    }\n    else if (operation === EditOperation.INSERT) {\n        return [new EditEntity(operation, symbol, number)]\n    } \n    else {\n        return [new EditEntity(operation, symbol, number)]\n    }\n}\n\n/**\n * \n * @param {EditEntity[]} array \n */\nfunction peekEntityNumber(array) {\n    if (array.length > 0) {\n        return array[array.length-1].entityNumber;\n    }\n    return Number.NEGATIVE_INFINITY;\n}\n\nfunction popMaxGroup(editsByOperation, prevEntityNumber) {\n    let maxDelete = peekEntityNumber(editsByOperation[EditOperation.DELETE]);\n    let maxInsert = peekEntityNumber(editsByOperation[EditOperation.INSERT]);\n    let maxNone = peekEntityNumber(editsByOperation[EditOperation.NONE]);\n    let maxEntityNumber = Math.max(maxDelete, maxInsert, maxNone);\n\n    if (maxDelete === prevEntityNumber - 1) {\n        return editsByOperation[EditOperation.DELETE].pop();\n    } else if  (maxInsert === prevEntityNumber - 1) {\n        return editsByOperation[EditOperation.INSERT].pop();\n    }\n    \n    if (maxEntityNumber === maxDelete) {\n        return editsByOperation[EditOperation.DELETE].pop();\n    } else if (maxEntityNumber === maxInsert) {\n        return editsByOperation[EditOperation.INSERT].pop();\n    } else {\n        return editsByOperation[EditOperation.NONE].pop();\n    }\n}\n\nexport function groupByContiguousOperation(editEntities) {\n    // Build accumulator as a map with an empty array present for all possible keys\n    let accumulator = { 1: [], 2:[], 3:[], 4: [] }\n\n    // Group edits using operation as key\n    let editsByOperation = editEntities.reduce((acc, curr) => {\n        let op = curr.operation;\n        acc[op].push(curr);\n        return acc;\n    }, accumulator);\n\n    let orderedEntities = []\n    let prevEntityNumber = editEntities.length + 1;\n    for (let count = 0; count < editEntities.length; count ++) {\n        let currEntity = popMaxGroup(editsByOperation, prevEntityNumber);\n        orderedEntities.push(currEntity);\n        prevEntityNumber = currEntity.entityNumber;\n    }\n    return orderedEntities.reverse();\n}\n\n/**\n * \n * @param {EditDistance} editDistance \n * @returns {EditEntity[]}\n */\nexport function toEditEntities(editDistance) {\n    let entities = [];\n    let entityNum = 1;\n    editDistance.fullEdits.forEach(edit => {\n        entities.push(...mapToEditEntities(edit, entityNum))\n        entityNum ++;\n    });\n    return entities;\n}\n\nexport function splitByOperation(editEntities) {\n    let inserts = [];\n    let deletes = [];\n\n    editEntities.forEach(editEntity => {\n        let { operation, subEditEntities } = editEntity;\n        if (operation === EditOperation.INSERT) {\n            inserts.push(editEntity);\n            if (subEditEntities === null) {\n                deletes.push(new EditEntity(EditOperation.NONE, \"\", \"*\",));\n            }\n        } else if (operation === EditOperation.DELETE) {\n            deletes.push(editEntity);\n            if (subEditEntities === null) {\n                inserts.push(new EditEntity(EditOperation.NONE, \"\", \"*\",));\n            }\n        } else {\n            inserts.push(editEntity);\n            deletes.push(editEntity);\n        }\n    })\n\n    return [inserts, deletes];\n}\n\nexport class EditEntity {\n\n    constructor(operation, symbol, entityNumber, subEditEntities = null) {\n        this.operation = operation;\n        this.symbol = symbol;\n        this.entityNumber = entityNumber;\n        this.subEditEntities = subEditEntities;\n    }\n\n}\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport { EditOperation } from '../editdistance/EditDistance'\n\nconst Line = styled.div`\n    width: 100%;\n    height: auto;\n    display: inline-flex;\n    overflow: scroll;\n    text-align: left;\n    font-family: 'Inconsolata', monospace;\n    font-size: 16px;\n\n    ${props => {\n        if (props.operation === EditOperation.INSERT) {\n            return \"background-color: #daffd9\";\n        } else if (props.operation === EditOperation.DELETE) {\n            return \"background-color: #ffd9df\";\n        }\n    }};\n`;\n\nconst LineEntity = styled.div`\n    display: inline-block;\n    padding: 2px 8px;\n    white-space: pre;\n`;\n\nconst LineNum = styled(LineEntity)`\n    width: 32px;\n    min-width: 32px;\n    padding-right: 8px;\n    padding-left: 0px;\n    text-align: right;\n    color: #AAA;\n    background-color: rgba(0, 0, 0, .1);\n`;\n\nconst LineReplace = styled.div`\n    display: inline-block;\n    ${props => {\n        if (props.operation === EditOperation.INSERT) {\n            return \"background-color: #a8f7a6\";\n        } else if (props.operation === EditOperation.DELETE) {\n            return \"background-color: #f7a6a6\";\n        }\n    }};\n`;\n\n\nclass DiffLine extends Component {\n\n    render() {\n        const { operation, symbol, entityNumber, subEditEntities } = this.props.editEntity\n\n        let operator = <div>&nbsp;</div>;\n        if (operation === EditOperation.INSERT) {\n            operator = '+';\n        } else if (operation === EditOperation.DELETE) {\n            operator = '-';\n        }\n\n        let line =\n            <LineEntity operation={operation}>\n                {symbol}\n            </LineEntity>;\n        if (subEditEntities) {\n            line =\n                <LineEntity operation={operation}>\n                    {subEditEntities.map((subEdit, i) => {\n                        return <LineReplace operation={subEdit.operation} key={i}>{subEdit.symbol}</LineReplace>\n                    })}\n                </LineEntity>;\n        }\n        \n        return (\n            <Line operation={operation}>\n                <LineNum operation={operation}>\n                    {entityNumber}\n                </LineNum>\n                <LineEntity operation={operation}>\n                    {operator}\n                </LineEntity>\n                {line}\n            </Line>\n        )\n    }\n\n}\n\nexport default DiffLine;","import React from 'react'\nimport styled from '@xstyled/styled-components';\nimport { toEditEntities, groupByContiguousOperation, splitByOperation } from '../editdistance/EditEntity'\nimport { Box, Radio, RadioGroup, Switch, useRadioState, Separator } from '@smooth-ui/core-sc'\nimport { RoundBoxer } from './Shared'\nimport DiffLine from './DiffLine'\n\nconst LeftMarginLabel = styled.label`\n    margin-left: 16px;\n`;\n\nconst Pill = styled.div`\n    display: inline-block;\n    border: 2px solid ${props => props.color};\n    color: ${props => props.color};\n    border-radius: 16px;\n    padding: 4px 8px;\n    margin-left: 16px;\n    font-size: 12px;\n`;\n\nfunction getColor(text) {\n    if (text === \"Done\") {\n        return \"#3bd12e\";\n    } else if (text === \"Waiting\") {\n        return \"#17A2B8\";\n    } else if (text === \"Processing\") {\n        return \"#AF1213\";\n    } else {\n        return \"#333\";\n    }\n}\n\nfunction DiffContainer(props) {\n    const radioState = useRadioState({state: \"viewInline\"});\n\n    let editEntities = toEditEntities(props.editDistance);\n\n    let inlineView = <RoundBoxer row\n        m={2}\n        mb={5}>\n        {\n            groupByContiguousOperation(toEditEntities(props.editDistance))\n                .map((editEntity, i) => <DiffLine editEntity={editEntity} key={i}/>)\n        }\n    </RoundBoxer>;\n\n    let sideView = <RoundBoxer row\n        m={2}\n        mb={5}>\n            <Box col={1/2}> \n            {\n                splitByOperation(editEntities)[0]\n                    .map((editEntity, i) => <DiffLine editEntity={editEntity} key={i}/>)\n            }\n            </Box>\n            <Box col={1/2}>\n            {\n                splitByOperation(editEntities)[1]\n                    .map((editEntity, i) => <DiffLine editEntity={editEntity} key={i}/>)\n            }\n            </Box>\n        </RoundBoxer>;\n\n    let view = [inlineView];\n    if (radioState.state === \"viewSide\") {\n        view = [sideView];\n    }\n\n    return (\n        <>\n            <Box row mt={2}>\n                <Box col>\n                    <LeftMarginLabel mx={1}>\n                        <Switch\n                            checked={props.delayedComputation}\n                            onChange={props.toggleDelayedComputation}\n                            scale=\"sm\"\n                            name=\"xs\"\n                            verticalAlign=\"middle\"/> Delayed Computation\n                    </LeftMarginLabel>\n                    <Pill color={getColor(props.diffStateString)}>\n                        <strong>{props.diffStateString}</strong>\n                    </Pill>\n                    <Separator/>\n                    <RadioGroup {...radioState}\n                        aria-label=\"display options\"\n                        py={1}>\n                            <Box row justifyContent={{ md: 'left' }}>\n                                <Box col={{xs:1, md: 'auto'}}>\n                                    <LeftMarginLabel>\n                                        <Radio {...radioState} value=\"viewInline\"/> Inline\n                                    </LeftMarginLabel>\n                                    </Box>  \n                                <Box col={{xs:1, md: 'auto'}}\n                                    mt={{xs:2, md: 0}}>\n                                    <LeftMarginLabel>\n                                        <Radio {...radioState} value=\"viewSide\"/> Side\n                                    </LeftMarginLabel>\n                                </Box>  \n                            </Box>\n                             \n                    </RadioGroup>\n                </Box>\n            </Box>\n            {\n                view.map(i => i)\n            }\n        </>\n    );\n}\n\nexport default DiffContainer;","import React, { Component } from 'react';\nimport Title from './components/Title'\nimport TextInputs from './components/TextInputs'\nimport Description from './components/Description'\nimport DiffContainer from './components/DiffContainer'\nimport { Box, Normalize } from '@smooth-ui/core-sc'\nimport { EditDistance } from './editdistance/EditDistance'\n\nconst newDocument = [\n    \"Hello World!\",\n    \"Have fun playing around with my implementation of a text comparison tool,\",\n    \"based off of the Wagner–Fischer dynamic programming algorithm for calculating\",\n    \"the Levenshtein distance between two strings.\",\n    \"I have tried to display differences in an easy-to-read format, by grouping\",\n    \"contiguous operations together, and by highlighting small differences between\",\n    \"similar lines (as seen above).\",\n    \"New lines appear like this\",\n    \"(with no per-character highlighting)\",\n    \"(again, with no per-character highlighting)\",\n    'Finally, if you\\'re working with large documents, consider keeping',\n    '\"Delayed Computation\" on, as it will wait until you stop typing before',\n    'recomputing the differences, instead of after each keystroke.'\n];\n\nconst oldDocument = [\n    \"Hello World!\",\n    \"Have fun playing around with my implementation of a text diff tool,\",\n    \"based off of the Wagner–Fischer DP algorithm for calculating\",\n    \"the edit distance between two strings.\",\n    \"I have tried to display differences in an easy-to-read format, by grouping\",\n    \"contiguous operations together, and by highlighting small differences between\",\n    \"similar lines (as seen above).\",\n    \"(with no per-character highlighting)\",\n    \"And deleted lines appear like this\",\n    \"(again, with no per-character highlighting)\",\n    'Finally, if you\\'re working with large documents, consider keeping',\n    '\"Delayed Computation\" on, as it will wait until you stop typing before',\n    'recomputing the differences, instead of after each keystroke.'\n];\n\nclass App extends Component {\n    state = {\n        newDocument: newDocument,\n        oldDocument: oldDocument,\n        editDistance: new EditDistance(newDocument, oldDocument),\n        delayedComputation: true,\n        diffStateString: \"Done\"\n    };\n\n    constructor() {\n        super();\n        this.computeDiffTimer = null;\n        this.processingTimer = null;\n\n        this.toggleDelayedComputation = this.toggleDelayedComputation.bind(this);\n        this.triggerDiffComputation = this.triggerDiffComputation.bind(this);\n        this.recomputeDiff = this.recomputeDiff.bind(this);\n        this.updateDocument = this.updateDocument.bind(this);\n        this.updateDiffStateString = this.updateDiffStateString.bind(this);\n    }\n\n    triggerDiffComputation() {\n        clearTimeout(this.computeDiffTimer);\n        if (this.state.delayedComputation) {\n            this.updateDiffStateString(\"Waiting\");\n            this.computeDiffTimer = setTimeout(() => {\n                this.recomputeDiff();\n            }, 1000);\n        } else {\n            this.recomputeDiff();\n        }\n    }\n\n    recomputeDiff() {\n        this.updateDiffStateString(\"Processing\");\n        clearTimeout(this.processingTimer);\n        this.processingTimer = setTimeout(() => {\n            let { newDocument, oldDocument } = this.state;\n            let newEditDistance = new EditDistance(newDocument, oldDocument)\n            this.setState({\n                editDistance: newEditDistance\n            });\n            this.updateDiffStateString(\"Done\");\n        }, 100);\n    }\n\n    updateDocument(target, updateNewDocument = true) {\n        let { newDocument, oldDocument } = this.state;\n        this.setState({\n            newDocument: updateNewDocument ? target.value.split('\\n') : newDocument,\n            oldDocument: updateNewDocument ? oldDocument : target.value.split('\\n')\n        });\n        this.triggerDiffComputation();\n    }\n\n    toggleDelayedComputation() {\n        this.setState({\n            delayedComputation: !this.state.delayedComputation\n        });\n    }\n\n    updateDiffStateString(newState) {\n        this.setState({\n            diffStateString: newState\n        });\n    }\n\n    render() {\n        return (\n            <>\n                <Normalize />\n                {\n                    <>\n                        <Title/>\n                        \n                        <Box\n                            width={1}\n                            height={100}\n                            px={{xs:3, md: 6}}\n                            py={3}>\n                                <Description/>\n                                <TextInputs\n                                    newDocument={newDocument.join('\\n')}\n                                    oldDocument={oldDocument.join('\\n')}\n                                    updateDocument={this.updateDocument}/>\n                                <DiffContainer\n                                    editDistance={this.state.editDistance}\n                                    delayedComputation={this.state.delayedComputation}\n                                    toggleDelayedComputation={this.toggleDelayedComputation}\n                                    diffStateString={this.state.diffStateString}/>\n                        </Box>\n                    </>\n                }\n            </>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ThemeProvider } from '@xstyled/styled-components'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst theme = {\n    colors: {\n      text: '#000',\n      background: '#fff',\n      primary: '#17A2B8',\n      modes: {\n        dark: {\n          text: '#fff',\n          background: '#000',\n          primary: '#0cf',\n        },\n      },\n    },\n  }\n\nReactDOM.render(\n    <ThemeProvider theme={theme}>\n            <App />\n    </ThemeProvider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}